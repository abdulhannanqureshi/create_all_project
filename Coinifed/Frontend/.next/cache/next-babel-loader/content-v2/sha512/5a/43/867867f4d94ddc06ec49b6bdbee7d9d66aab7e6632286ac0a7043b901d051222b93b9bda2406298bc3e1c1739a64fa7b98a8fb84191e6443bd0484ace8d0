{"ast":null,"code":"import _extends from \"C:/xampp/htdocs/coinfield/coinfied/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"C:/xampp/htdocs/coinfield/coinfied/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\n\nvar _jsxFileName = \"C:\\\\xampp\\\\htdocs\\\\coinfield\\\\coinfied\\\\frontend\\\\src\\\\views\\\\Dashboard\\\\components\\\\Notifications\\\\Notifications.js\",\n    _s = $RefreshSig$();\n\nvar __jsx = React.createElement;\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport useTheme from '@material-ui/core/styles/useTheme';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Typography from '@material-ui/core/Typography';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport clsx from \"clsx\";\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nconst useStyles = makeStyles(theme => ({\n  loader: {\n    display: \"flex\",\n    minHeight: \"500px\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  titleCta: {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    alignItems: \"center\"\n  },\n  tableWrapper: {\n    [theme.breakpoints.down(\"sm\")]: {\n      minWidth: 670\n    }\n  },\n  emptyData: {\n    fontWeight: \"700\"\n  },\n  toCapitalize: {\n    textTransform: 'capitalize'\n  }\n}));\n\nfunction createData(name, calories, fat, carbs, protein) {\n  return {\n    name,\n    calories,\n    fat,\n    carbs,\n    protein\n  };\n}\n\nconst rows = [createData(\"Frozen yoghurt\", 159, 6.0, 24, 4.0), createData(\"Ice cream sandwich\", 237, 9.0, 37, 4.3), createData(\"Eclair\", 262, 16.0, 24, 6.0), createData(\"Cupcake\", 305, 3.7, 67, 4.3), createData(\"Gingerbread\", 356, 16.0, 49, 3.9)];\n\nconst Notifications = props => {\n  _s();\n\n  const {\n    className,\n    paymentHistory\n  } = props,\n        rest = _objectWithoutProperties(props, [\"className\", \"paymentHistory\"]);\n\n  const classes = useStyles();\n  const theme = useTheme();\n  const isMd = useMediaQuery(theme.breakpoints.up(\"md\"), {\n    defaultMatches: true\n  });\n  return __jsx(\"div\", _extends({\n    className: className\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 5\n    }\n  }), __jsx(Grid, {\n    container: true,\n    spacing: isMd ? 4 : 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: classes.titleCta,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    color: \"textPrimary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }, \"My Transactions\"))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, __jsx(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }\n  }, __jsx(TableContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  }, __jsx(Table, {\n    className: clsx(classes.table, classes.tableWrapper),\n    \"aria-label\": \"simple table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }\n  }, __jsx(TableHead, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 15\n    }\n  }, __jsx(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, __jsx(TableCell, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 19\n    }\n  }, \"S.No.\"), __jsx(TableCell, {\n    align: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 19\n    }\n  }, \"Name\"), __jsx(TableCell, {\n    align: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 19\n    }\n  }, \"Date\"), __jsx(TableCell, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 19\n    }\n  }, \"Discount\"), __jsx(TableCell, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 19\n    }\n  }, \"Total Amount\"))), __jsx(TableBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 15\n    }\n  }, paymentHistory && paymentHistory.length ? __jsx(React.Fragment, null, paymentHistory.map((row, index) => __jsx(TableRow, {\n    key: row.index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 23\n    }\n  }, __jsx(TableCell, {\n    component: \"th\",\n    scope: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 25\n    }\n  }, index + 1, \".\"), __jsx(TableCell, {\n    component: \"th\",\n    scope: \"row\",\n    className: classes.toCapitalize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 25\n    }\n  }, row.fullName), __jsx(TableCell, {\n    align: \"left\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 25\n    }\n  }, moment(row.createdAt).format(\"dddd, MMMM Do YYYY\")), __jsx(TableCell, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 25\n    }\n  }, \"$\", row.discountedAmount), __jsx(TableCell, {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 25\n    }\n  }, \"$\", row.grandTotal)))) : __jsx(TableRow, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 19\n    }\n  }, __jsx(TableCell, {\n    component: \"th\",\n    scope: \"row\",\n    colSpan: \"5\",\n    align: \"center\",\n    className: classes.emptyData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 21\n    }\n  }, \"No Transactions made yet.\"))))))));\n};\n\n_s(Notifications, \"9025em9jOQdmzpWvV0plUgcVqs8=\", false, function () {\n  return [useStyles, useTheme, useMediaQuery];\n});\n\n_c = Notifications;\nNotifications.propTypes = {\n  /**\r\n   * External classes\r\n   */\n  className: PropTypes.string\n};\nexport default Notifications;\n\nvar _c;\n\n$RefreshReg$(_c, \"Notifications\");","map":{"version":3,"sources":["C:/xampp/htdocs/coinfield/coinfied/frontend/src/views/Dashboard/components/Notifications/Notifications.js"],"names":["CircularProgress","Divider","Grid","makeStyles","useTheme","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Typography","useMediaQuery","clsx","moment","PropTypes","React","useStyles","theme","loader","display","minHeight","justifyContent","alignItems","titleCta","tableWrapper","breakpoints","down","minWidth","emptyData","fontWeight","toCapitalize","textTransform","createData","name","calories","fat","carbs","protein","rows","Notifications","props","className","paymentHistory","rest","classes","isMd","up","defaultMatches","table","length","map","row","index","fullName","createdAt","format","discountedAmount","grandTotal","propTypes","string"],"mappings":";;;;;;;AAAA,OAAOA,gBAAP,MAA6B,oCAA7B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,qCAAvB;AACA,OAAOC,QAAP,MAAqB,mCAArB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,cAAP,MAA2B,kCAA3B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,SAAS,GAAGd,UAAU,CAAEe,KAAD,KAAY;AACvCC,EAAAA,MAAM,EAAE;AACNC,IAAAA,OAAO,EAAE,MADH;AAENC,IAAAA,SAAS,EAAE,OAFL;AAGNC,IAAAA,cAAc,EAAE,QAHV;AAINC,IAAAA,UAAU,EAAE;AAJN,GAD+B;AAOvCC,EAAAA,QAAQ,EAAE;AACRJ,IAAAA,OAAO,EAAE,MADD;AAERE,IAAAA,cAAc,EAAE,eAFR;AAGRC,IAAAA,UAAU,EAAE;AAHJ,GAP6B;AAYvCE,EAAAA,YAAY,EAAE;AACZ,KAACP,KAAK,CAACQ,WAAN,CAAkBC,IAAlB,CAAuB,IAAvB,CAAD,GAAgC;AAC9BC,MAAAA,QAAQ,EAAE;AADoB;AADpB,GAZyB;AAiBvCC,EAAAA,SAAS,EAAE;AACTC,IAAAA,UAAU,EAAE;AADH,GAjB4B;AAoBvCC,EAAAA,YAAY,EAAC;AACXC,IAAAA,aAAa,EAAE;AADJ;AApB0B,CAAZ,CAAD,CAA5B;;AAyBA,SAASC,UAAT,CAAoBC,IAApB,EAA0BC,QAA1B,EAAoCC,GAApC,EAAyCC,KAAzC,EAAgDC,OAAhD,EAAyD;AACvD,SAAO;AAAEJ,IAAAA,IAAF;AAAQC,IAAAA,QAAR;AAAkBC,IAAAA,GAAlB;AAAuBC,IAAAA,KAAvB;AAA8BC,IAAAA;AAA9B,GAAP;AACD;;AAED,MAAMC,IAAI,GAAG,CACXN,UAAU,CAAC,gBAAD,EAAmB,GAAnB,EAAwB,GAAxB,EAA6B,EAA7B,EAAiC,GAAjC,CADC,EAEXA,UAAU,CAAC,oBAAD,EAAuB,GAAvB,EAA4B,GAA5B,EAAiC,EAAjC,EAAqC,GAArC,CAFC,EAGXA,UAAU,CAAC,QAAD,EAAW,GAAX,EAAgB,IAAhB,EAAsB,EAAtB,EAA0B,GAA1B,CAHC,EAIXA,UAAU,CAAC,SAAD,EAAY,GAAZ,EAAiB,GAAjB,EAAsB,EAAtB,EAA0B,GAA1B,CAJC,EAKXA,UAAU,CAAC,aAAD,EAAgB,GAAhB,EAAqB,IAArB,EAA2B,EAA3B,EAA+B,GAA/B,CALC,CAAb;;AAQA,MAAMO,aAAa,GAAIC,KAAD,IAAW;AAAA;;AAC/B,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAAyCF,KAA/C;AAAA,QAAsCG,IAAtC,4BAA+CH,KAA/C;;AACA,QAAMI,OAAO,GAAG5B,SAAS,EAAzB;AAEA,QAAMC,KAAK,GAAGd,QAAQ,EAAtB;AACA,QAAM0C,IAAI,GAAGlC,aAAa,CAACM,KAAK,CAACQ,WAAN,CAAkBqB,EAAlB,CAAqB,IAArB,CAAD,EAA6B;AACrDC,IAAAA,cAAc,EAAE;AADqC,GAA7B,CAA1B;AAIA,SACE;AAAK,IAAA,SAAS,EAAEN;AAAhB,KAA+BE,IAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACE,MAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAEE,IAAI,GAAG,CAAH,GAAO,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,SAAS,EAAED,OAAO,CAACrB,QAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,KAAK,EAAC,aAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBADF,CADF,CADF,EAQE,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CARF,EAWE,MAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAE,EAAf;AAAmB,IAAA,EAAE,EAAE,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,KAAD;AACE,IAAA,SAAS,EAAEX,IAAI,CAACgC,OAAO,CAACI,KAAT,EAAgBJ,OAAO,CAACpB,YAAxB,CADjB;AAEE,kBAAW,cAFb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAIE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,EAEE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,EAGE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,EAIE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJF,EAKE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALF,CADF,CAJF,EAaE,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGkB,cAAc,IAAIA,cAAc,CAACO,MAAjC,GACC,4BACGP,cAAc,CAACQ,GAAf,CAAmB,CAACC,GAAD,EAAMC,KAAN,KAClB,MAAC,QAAD;AAAU,IAAA,GAAG,EAAED,GAAG,CAACC,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AAAW,IAAA,SAAS,EAAC,IAArB;AAA0B,IAAA,KAAK,EAAC,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,KAAK,GAAG,CADX,MADF,EAIE,MAAC,SAAD;AAAW,IAAA,SAAS,EAAC,IAArB;AAA0B,IAAA,KAAK,EAAC,KAAhC;AAAsC,IAAA,SAAS,EAAER,OAAO,CAACd,YAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGqB,GAAG,CAACE,QADP,CAJF,EAOE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGxC,MAAM,CAACsC,GAAG,CAACG,SAAL,CAAN,CAAsBC,MAAtB,CAA6B,oBAA7B,CADH,CAPF,EAUE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UACIJ,GAAG,CAACK,gBADR,CAVF,EAaE,MAAC,SAAD;AAAW,IAAA,KAAK,EAAC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA4BL,GAAG,CAACM,UAAhC,CAbF,CADD,CADH,CADD,GAqBC,MAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD;AACE,IAAA,SAAS,EAAC,IADZ;AAEE,IAAA,KAAK,EAAC,KAFR;AAGE,IAAA,OAAO,EAAC,GAHV;AAIE,IAAA,KAAK,EAAC,QAJR;AAKE,IAAA,SAAS,EAAEb,OAAO,CAAChB,SALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,CAtBJ,CAbF,CADF,CADF,CAXF,CADF,CADF;AAqED,CA9ED;;GAAMW,a;UAEYvB,S,EAEFb,Q,EACDQ,a;;;KALT4B,a;AAgFNA,aAAa,CAACmB,SAAd,GAA0B;AACxB;AACF;AACA;AACEjB,EAAAA,SAAS,EAAE3B,SAAS,CAAC6C;AAJG,CAA1B;AAOA,eAAepB,aAAf","sourcesContent":["import CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport makeStyles from '@material-ui/core/styles/makeStyles';\r\nimport useTheme from '@material-ui/core/styles/useTheme';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport clsx from \"clsx\";\r\nimport moment from 'moment';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  loader: {\r\n    display: \"flex\",\r\n    minHeight: \"500px\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  titleCta: {\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n  },\r\n  tableWrapper: {\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      minWidth: 670,\r\n    },\r\n  },\r\n  emptyData: {\r\n    fontWeight: \"700\",\r\n  },\r\n  toCapitalize:{\r\n    textTransform: 'capitalize'\r\n  }\r\n}));\r\n\r\nfunction createData(name, calories, fat, carbs, protein) {\r\n  return { name, calories, fat, carbs, protein };\r\n}\r\n\r\nconst rows = [\r\n  createData(\"Frozen yoghurt\", 159, 6.0, 24, 4.0),\r\n  createData(\"Ice cream sandwich\", 237, 9.0, 37, 4.3),\r\n  createData(\"Eclair\", 262, 16.0, 24, 6.0),\r\n  createData(\"Cupcake\", 305, 3.7, 67, 4.3),\r\n  createData(\"Gingerbread\", 356, 16.0, 49, 3.9),\r\n];\r\n\r\nconst Notifications = (props) => {\r\n  const { className, paymentHistory, ...rest } = props;\r\n  const classes = useStyles();\r\n\r\n  const theme = useTheme();\r\n  const isMd = useMediaQuery(theme.breakpoints.up(\"md\"), {\r\n    defaultMatches: true,\r\n  });\r\n\r\n  return (\r\n    <div className={className} {...rest}>\r\n      <Grid container spacing={isMd ? 4 : 2}>\r\n        <Grid item xs={12}>\r\n          <div className={classes.titleCta}>\r\n            <Typography variant='h6' color='textPrimary'>\r\n              My Transactions\r\n            </Typography>\r\n          </div>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <Divider />\r\n        </Grid>\r\n        <Grid item xs={12} md={12}>\r\n          <TableContainer>\r\n            <Table\r\n              className={clsx(classes.table, classes.tableWrapper)}\r\n              aria-label='simple table'\r\n            >\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>S.No.</TableCell>\r\n                  <TableCell align='left'>Name</TableCell>\r\n                  <TableCell align='left'>Date</TableCell>\r\n                  <TableCell align='center'>Discount</TableCell>\r\n                  <TableCell align='center'>Total Amount</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {paymentHistory && paymentHistory.length  ? (\r\n                  <>\r\n                    {paymentHistory.map((row, index) => (\r\n                      <TableRow key={row.index}>\r\n                        <TableCell component='th' scope='row'>\r\n                          {index + 1}.\r\n                        </TableCell>\r\n                        <TableCell component='th' scope='row' className={classes.toCapitalize}>\r\n                          {row.fullName}\r\n                        </TableCell>\r\n                        <TableCell align='left'>\r\n                          {moment(row.createdAt).format(\"dddd, MMMM Do YYYY\")}\r\n                        </TableCell>\r\n                        <TableCell align='center'>\r\n                          ${row.discountedAmount}\r\n                        </TableCell>\r\n                        <TableCell align='center'>${row.grandTotal}</TableCell>\r\n                      </TableRow>\r\n                    ))}\r\n                  </>\r\n                ) : (\r\n                  <TableRow>\r\n                    <TableCell\r\n                      component='th'\r\n                      scope='row'\r\n                      colSpan='5'\r\n                      align='center'\r\n                      className={classes.emptyData}\r\n                    >\r\n                      No Transactions made yet.\r\n                    </TableCell>\r\n                  </TableRow>\r\n                )}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nNotifications.propTypes = {\r\n  /**\r\n   * External classes\r\n   */\r\n  className: PropTypes.string,\r\n};\r\n\r\nexport default Notifications;\r\n"]},"metadata":{},"sourceType":"module"}