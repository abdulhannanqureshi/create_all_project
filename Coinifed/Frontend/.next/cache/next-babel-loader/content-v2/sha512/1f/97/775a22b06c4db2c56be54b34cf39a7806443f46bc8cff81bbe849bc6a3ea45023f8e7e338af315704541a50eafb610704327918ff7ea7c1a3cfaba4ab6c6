{"ast":null,"code":"import _extends from \"C:/xampp/htdocs/coinfield/coinfied/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/extends\";\nimport _regeneratorRuntime from \"C:/xampp/htdocs/coinfield/coinfied/frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/xampp/htdocs/coinfield/coinfied/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"C:/xampp/htdocs/coinfield/coinfied/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"C:/xampp/htdocs/coinfield/coinfied/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"C:/xampp/htdocs/coinfield/coinfied/frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport { ApiHelper } from \"../../../../helper\";\nimport { ApiRoutes } from \"../../../../config/ApiRoutes\";\nimport validate from 'validate.js';\nimport Toast from 'components/toaster';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport { SectionHeader } from 'components/molecules';\nimport { CardBase } from 'components/organisms';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport clsx from \"clsx\";\nimport { CircularProgress } from '@material-ui/core';\nvar schema = {\n  email: {\n    presence: {\n      allowEmpty: false,\n      message: \"is required\"\n    },\n    email: true,\n    length: {\n      maximum: 120\n    }\n  }\n};\nvar useStyles = makeStyles(function (theme) {\n  return {\n    commonBtn: {\n      display: \"inline-block\",\n      padding: \"7px 10px\",\n      backgroundColor: \"#5120FF\",\n      fontSize: 16,\n      minWidth: 200,\n      border: \"solid 1px #5120FF\",\n      textAlign: \"center\",\n      transition: \"all 0.3s ease-in-out\",\n      boxShadow: \"none\",\n      \"&:hover\": {\n        backgroundColor: \"#fff\",\n        color: \"#5120FF\",\n        boxShadow: \"none\",\n        \"& $loaderCommon\": {\n          color: \"#5120FF !important\"\n        }\n      },\n      \"&:disabled\": {\n        backgroundColor: \"#5362fc !important\"\n      }\n    },\n    boxShadowHighlight: {\n      boxShadow: \"rgba(0, 0, 0, 0.25) 0px 0.0625em 0.0625em, rgba(0, 0, 0, 0.25) 0px 0.125em 0.5em, rgba(255, 255, 255, 0.1) 0px 0px 0px 1px inset\"\n    },\n    smallCommonBtn: {\n      minWidth: 132,\n      padding: \"8px 10px\",\n      fontSize: 15\n    },\n    customField: {\n      \"& input\": {\n        padding: \"15px\",\n        height: 44,\n        boxSizing: \" border-box\"\n      }\n    },\n    loaderCommon: {\n      width: \"17px !important\",\n      height: \"17px !important\",\n      color: \"white\"\n    },\n    errorText: {\n      color: 'red',\n      fontSize: \"14px\"\n    }\n  };\n});\n\nvar Subscription = function Subscription(props) {\n  var classes = useStyles();\n\n  var className = props.className,\n      rest = _objectWithoutProperties(props, [\"className\"]);\n\n  var _React$useState = React.useState({\n    isValid: false,\n    values: {},\n    touched: {},\n    errors: {}\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      formState = _React$useState2[0],\n      setFormState = _React$useState2[1];\n\n  useEffect(function () {\n    var errors = validate(formState.values, schema);\n    setFormState(function (formState) {\n      return _objectSpread(_objectSpread({}, formState), {}, {\n        isValid: errors ? false : true,\n        errors: errors || {}\n      });\n    });\n  }, [formState.values]);\n  useEffect(function () {}, [props]);\n\n  var handleChange = function handleChange(event) {\n    event.persist();\n    setFormState(function (formState) {\n      return _objectSpread(_objectSpread({}, formState), {}, {\n        values: _objectSpread(_objectSpread({}, formState.values), {}, _defineProperty({}, event.target.name, event.target.value)),\n        touched: _objectSpread(_objectSpread({}, formState.touched), {}, _defineProperty({}, event.target.name, true))\n      });\n    });\n  };\n\n  var _useState = useState(false),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  var handleSubmit = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n      var data, response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              event.preventDefault();\n\n              if (!formState.isValid) {\n                _context.next = 8;\n                break;\n              }\n\n              data = {\n                email: formState.values.email\n              };\n              setIsLoading(true);\n              _context.next = 6;\n              return new ApiHelper().FetchFromServer(ApiRoutes.NEWSLETTERSUBSCRIBE.service, ApiRoutes.NEWSLETTERSUBSCRIBE.url, ApiRoutes.NEWSLETTERSUBSCRIBE.method, ApiRoutes.NEWSLETTERSUBSCRIBE.authenticate, undefined, undefined, data);\n\n            case 6:\n              response = _context.sent;\n\n              if (response && !response.isError) {\n                Toast.fire({\n                  icon: \"success\",\n                  title: response.messages[0]\n                });\n                setIsLoading(false);\n              } else {\n                Toast.fire({\n                  icon: \"error\",\n                  title: response.messages[0]\n                });\n                setIsLoading(false);\n              }\n\n            case 8:\n              setFormState(function (formState) {\n                return _objectSpread(_objectSpread({}, formState), {}, {\n                  touched: _objectSpread(_objectSpread({}, formState.touched), formState.errors)\n                });\n              });\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function handleSubmit(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var hasError = function hasError(field) {\n    return formState.touched[field] && formState.errors[field] ? true : false;\n  };\n\n  return __jsx(\"div\", _extends({\n    className: className\n  }, rest), __jsx(CardBase, {\n    withShadow: true,\n    \"data-aos\": \"fade-up\",\n    className: classes.boxShadowHighlight\n  }, __jsx(SectionHeader, {\n    title: props.sending ? props.sending.blockTitle12 : null,\n    subtitle: props.sending ? props.sending.blockTitle13 : null,\n    fadeUp: true\n  }), __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"center\"\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 9\n  }, __jsx(TextField, {\n    placeholder: \"Your e-mail address\",\n    variant: \"outlined\",\n    size: \"medium\",\n    name: \"email\",\n    fullWidth: true,\n    type: \"email\",\n    helpertext: hasError(\"email\") ? formState.errors.email[0] : null,\n    error: hasError(\"email\"),\n    onChange: handleChange,\n    value: formState.values.email || \"\",\n    className: classes.customField\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 3\n  }, __jsx(Button, {\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleSubmit,\n    disabled: isLoading,\n    className: clsx(classes.commonBtn, classes.smallCommonBtn)\n  }, isLoading ? __jsx(CircularProgress, {\n    className: classes.loaderCommon\n  }) : \"subscribe\")), hasError(\"email\") ? __jsx(\"span\", {\n    className: classes.errorText\n  }, formState.errors.email[0]) : null)));\n};\n\nexport default Subscription;","map":null,"metadata":{},"sourceType":"module"}