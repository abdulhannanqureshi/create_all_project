{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport Grid from '@material-ui/core/Grid';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\nimport VisibilityOffIcon from \"@material-ui/icons/VisibilityOff\";\nimport clsx from \"clsx\";\nimport { LearnMoreLink } from \"components/atoms\";\nimport { Modal } from \"components/common\";\nimport Toast from \"components/toaster\";\nimport { useRouter } from \"next/router\";\nimport React, { useEffect, useState } from \"react\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport validate from \"validate.js\";\nimport Link from 'next/link';\nimport { ApiRoutes } from \"../../../../config/ApiRoutes\";\nimport { ApiHelper } from \"../../../../helper\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\"\n  },\n  link: {\n    color: \"#3f51b5\",\n    cursor: \"pointer\",\n    fontWeight: \"600\"\n  },\n  commonBtn: {\n    padding: \"7px 10px\",\n    backgroundColor: \"#5120FF\",\n    fontSize: 16,\n    border: \"solid 1px #5120FF\",\n    textAlign: \"center\",\n    transition: \"all 0.3s ease-in-out\",\n    boxShadow: \"none\",\n    \"&:hover\": {\n      backgroundColor: \"#fff\",\n      color: \"#5120FF\",\n      boxShadow: \"none\"\n    }\n  },\n  cusTextPrimary: {\n    \"& .MuiTypography-colorPrimary\": {\n      color: \"#5120ff\"\n    }\n  },\n  modalNoneTriggerText: {\n    marginRight: \"5px\",\n    fontWeight: \"500\",\n    verticalAlign: \"middle\",\n    paddingRight: \"17px\",\n    marginLeft: \"-14px\"\n  },\n  modalTriggerLable: {\n    marginLeft: \"-16px\",\n    cursor: \"pointer\",\n    color: \"#5120ff\",\n    fontWeight: \"500\",\n    verticalAlign: \"middle\"\n  },\n  eyeWrapper: {\n    position: \"absolute\",\n    top: \"50%\",\n    transform: \"translateY(-50%)\",\n    lineHeight: \"10px\",\n    right: 20,\n    cursor: \"pointer\",\n    \"& svg\": {\n      fill: \"#5120ff\"\n    }\n  },\n  negativeMarginTop: {\n    marginTop: \"-2px\"\n  },\n  marginNegative: {\n    marginTop: \"-28px\"\n  },\n  listings: {\n    marginLeft: \"15px\"\n  },\n  modalTitle: {\n    fontSize: \"18px\",\n    marginBottom: \"-15px\"\n  },\n  modalHeading: {\n    fontSize: \"18px\",\n    marginTop: \"15px\",\n    marginBottom: \"8px\"\n  },\n  positionRelative: {\n    position: \"relative\"\n  },\n  loader: {\n    display: \"flex\",\n    minHeight: \"200px\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }\n}));\nconst schema = {\n  email: {\n    presence: {\n      allowEmpty: false,\n      message: \"is required\"\n    },\n    email: true,\n    length: {\n      maximum: 300\n    }\n  },\n  firstName: {\n    presence: {\n      allowEmpty: false,\n      message: \"is required\"\n    },\n    length: {\n      maximum: 120\n    }\n  },\n  lastName: {\n    presence: {\n      allowEmpty: false,\n      message: \"is required\"\n    },\n    length: {\n      maximum: 120\n    }\n  },\n  userRole: {\n    presence: {\n      allowEmpty: false,\n      message: \"is required\"\n    }\n  },\n  password: {\n    presence: {\n      allowEmpty: false,\n      message: \"is required\"\n    },\n    length: {\n      minimum: 8\n    }\n  }\n};\nconst userRoles = [{\n  value: \"Individual\",\n  label: \"Individual\"\n}, {\n  value: \"Student\",\n  label: \"Student\"\n}, {\n  value: \"Corporate Employee\",\n  label: \"Corporate Employee\"\n}];\n\nconst Form = props => {\n  const {\n    cmsData,\n    universityData,\n    corporateData\n  } = props;\n  const classes = useStyles();\n  const router = useRouter();\n  const [formState, setFormState] = React.useState({\n    isValid: false,\n    values: {},\n    touched: {},\n    errors: {}\n  });\n  const [doNotSell, setDoNotSell] = React.useState(false);\n  const [templeteCheckboxes, setTempleteCheckboxes] = React.useState({\n    termsConditions: true,\n    privacyPolicy: true\n  });\n  const [modalState, setModalState] = React.useState(false);\n  const [modalOneState, setModalOneState] = React.useState(false);\n  const [modalTwoState, setModalTwoState] = React.useState(false);\n  const [eyeStatus, setEyeStatus] = React.useState(true); // For Get Do not sell Modal Content\n\n  const {\n    0: getTemplateData,\n    1: setGetTemplateData\n  } = useState(null);\n  const {\n    0: termsNcondtionData,\n    1: setTermsNcondtionData\n  } = useState(null);\n  const {\n    0: privayPolicyData,\n    1: setPrivacyPolicyData\n  } = useState(null);\n  const {\n    0: disableState,\n    1: setDisableState\n  } = useState(true); // For Get Template Data\n\n  useEffect(() => {\n    if (cmsData && cmsData.length) {\n      let getData = cmsData.filter(e => e.pageName === \"Do Not Sell\");\n      setGetTemplateData(...getData);\n      let termsConditionData = cmsData.filter(e => e.pageName === \"Terms And Condition\");\n      setTermsNcondtionData(...termsConditionData);\n      let privacyPolicyData = cmsData.filter(e => e.pageName === \"Privacy Policy\");\n      setPrivacyPolicyData(...privacyPolicyData);\n    }\n  }, [cmsData]);\n  React.useEffect(() => {\n    const errors = validate(formState.values, schema);\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      isValid: errors ? false : true,\n      errors: errors || {}\n    }));\n  }, [formState.values]);\n  React.useEffect(() => {\n    const {\n      userRole\n    } = formState.values;\n\n    if (userRole === \"Student\") {\n      // getUniversityData();\n      setFormState(prevFormstate => _objectSpread(_objectSpread({}, prevFormstate), {}, {\n        values: _objectSpread(_objectSpread({}, prevFormstate.values), {}, {\n          corporation: \"\"\n        })\n      }));\n    } else if (userRole === \"Corporate Employee\") {\n      // getCorporateData();\n      setFormState(prevFormstate => _objectSpread(_objectSpread({}, prevFormstate), {}, {\n        values: _objectSpread(_objectSpread({}, prevFormstate.values), {}, {\n          university: \"\"\n        })\n      }));\n    } else if (userRole === \"Individual\") {\n      setFormState(prevFormstate => _objectSpread(_objectSpread({}, prevFormstate), {}, {\n        values: _objectSpread(_objectSpread({}, prevFormstate.values), {}, {\n          corporation: \"\",\n          university: \"\"\n        })\n      }));\n    }\n  }, [formState.values.userRole]);\n\n  const handleChange = event => {\n    event.persist();\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      values: _objectSpread(_objectSpread({}, formState.values), {}, {\n        [event.target.name]: event.target.type === \"checkbox\" ? event.target.checked : event.target.value\n      }),\n      touched: _objectSpread(_objectSpread({}, formState.touched), {}, {\n        [event.target.name]: true\n      })\n    }));\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (formState.isValid) {\n      const data = {\n        firstName: formState.values.firstName,\n        lastName: formState.values.lastName,\n        email: formState.values.email,\n        password: formState.values.password,\n        role: formState.values.userRole,\n        university: formState.values.university,\n        corporate: formState.values.corporation,\n        doNotSell: doNotSell\n      };\n      const response = await new ApiHelper().FetchFromServer(ApiRoutes.SIGNUP.service, ApiRoutes.SIGNUP.url, ApiRoutes.SIGNUP.method, ApiRoutes.SIGNUP.authenticate, undefined, data);\n\n      if (response && !response.isError) {\n        Toast.fire({\n          icon: \"success\",\n          title: response.data.message\n        });\n\n        if (props.categoryId && props.categoryId !== \"\") {\n          props.setSignUpOpen(false); //props.handleAuthModalClose()\n        } else {\n          router.push(\"/signin\");\n        }\n      } else {\n        Toast.fire({\n          icon: \"error\",\n          title: response.messages[0]\n        });\n      }\n    }\n\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      touched: _objectSpread(_objectSpread({}, formState.touched), formState.errors)\n    }));\n  };\n\n  const handleCheckboxChange = event => {\n    setDoNotSell(event.target.checked);\n  };\n\n  const handleCheckboxChange1 = e => {\n    setTempleteCheckboxes(_objectSpread(_objectSpread({}, templeteCheckboxes), {}, {\n      [e.target.name]: e.target.checked\n    }));\n  };\n\n  useEffect(() => {\n    if (templeteCheckboxes.privacyPolicy && templeteCheckboxes.termsConditions) {\n      setDisableState(false);\n    } else {\n      setDisableState(true);\n    }\n  }, [templeteCheckboxes]);\n\n  const modalTriggering = () => {\n    setModalState(true);\n  };\n\n  const modalTriggering1 = () => {\n    setModalOneState(true);\n  };\n\n  const modalTriggering2 = () => {\n    setModalTwoState(true);\n  };\n\n  const handleClose = () => {\n    setModalState(false);\n  };\n\n  const handleClose1 = () => {\n    setModalOneState(false);\n  };\n\n  const handleClose2 = () => {\n    setModalTwoState(false);\n  };\n\n  const hasError = field => formState.touched[field] && formState.errors[field] ? true : false;\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"form\", {\n    name: \"password-reset-form\",\n    method: \"post\",\n    onSubmit: handleSubmit\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 6\n  }, __jsx(TextField, {\n    placeholder: \"First name\",\n    label: \"First name *\",\n    variant: \"outlined\",\n    size: \"medium\",\n    name: \"firstName\",\n    fullWidth: true,\n    helpertext: hasError(\"firstName\") ? formState.errors.firstName[0] : null,\n    error: hasError(\"firstName\"),\n    onChange: handleChange,\n    type: \"firstName\",\n    value: formState.values.firstName || \"\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 6\n  }, __jsx(TextField, {\n    placeholder: \"Last name\",\n    label: \"Last name *\",\n    variant: \"outlined\",\n    size: \"medium\",\n    name: \"lastName\",\n    fullWidth: true,\n    helpertext: hasError(\"lastName\") ? formState.errors.lastName[0] : null,\n    error: hasError(\"lastName\"),\n    onChange: handleChange,\n    type: \"lastName\",\n    value: formState.values.lastName || \"\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(TextField, {\n    id: \"outlined-select-currency-native\",\n    select: true,\n    size: \"medium\",\n    name: \"userRole\",\n    fullWidth: true,\n    label: \"\",\n    value: formState.values.userRole,\n    onChange: handleChange,\n    SelectProps: {\n      native: true\n    },\n    helpertext: hasError(\"userRole\") ? formState.errors.userRole[0] : null,\n    variant: \"outlined\"\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Please select Type\"), userRoles.map((option, index) => __jsx(\"option\", {\n    key: index,\n    value: option.value\n  }, option.label)))), formState.values.userRole === \"Student\" ? __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(TextField, {\n    id: \"outlined-select-currency-native\",\n    select: true,\n    size: \"medium\",\n    name: \"university\",\n    fullWidth: true,\n    value: formState.values.university,\n    onChange: handleChange,\n    SelectProps: {\n      native: true\n    },\n    helpertext: hasError(\"userRole\") ? formState.errors.userRole[0] : null,\n    variant: \"outlined\"\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Please select University\"), universityData.map((option, index) => __jsx(\"option\", {\n    key: index,\n    value: option.name\n  }, option.name)))) : \"\", formState.values.userRole === \"Corporate Employee\" ? __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(TextField, {\n    id: \"outlined-select-currency-native\",\n    select: true,\n    size: \"medium\",\n    name: \"corporation\",\n    fullWidth: true,\n    value: formState.values.corporation,\n    onChange: handleChange,\n    SelectProps: {\n      native: true\n    },\n    helpertext: hasError(\"userRole\") ? formState.errors.userRole[0] : null,\n    variant: \"outlined\"\n  }, __jsx(\"option\", {\n    value: \"\"\n  }, \"Please select Corporate\"), corporateData.map((option, index) => __jsx(\"option\", {\n    key: option.index,\n    value: option.name\n  }, option.name)))) : \"\", __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(TextField, {\n    placeholder: \"E-mail\",\n    label: \"E-mail *\",\n    variant: \"outlined\",\n    size: \"medium\",\n    name: \"email\",\n    fullWidth: true,\n    helpertext: hasError(\"email\") ? formState.errors.email[0] : null,\n    error: hasError(\"email\"),\n    onChange: handleChange,\n    type: \"email\",\n    value: formState.values.email || \"\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Box, {\n    className: classes.positionRelative\n  }, __jsx(TextField, {\n    placeholder: \"Password\",\n    label: \"Password *\",\n    variant: \"outlined\",\n    size: \"medium\",\n    name: \"password\",\n    fullWidth: true,\n    helpertext: hasError(\"password\") ? formState.errors.password[0] : null,\n    error: hasError(\"password\"),\n    onChange: handleChange,\n    type: eyeStatus ? \"password\" : \"text\",\n    value: formState.values.password || \"\"\n  }), eyeStatus ? __jsx(Box, {\n    className: clsx(classes.eyeWrapper, classes.eyeVisible),\n    onClick: () => setEyeStatus(!eyeStatus)\n  }, __jsx(VisibilityIcon, null)) : __jsx(Box, {\n    className: clsx(classes.eyeWrapper, classes.eyeOff),\n    onClick: () => setEyeStatus(!eyeStatus)\n  }, __jsx(VisibilityOffIcon, null)))), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      onChange: handleCheckboxChange,\n      name: \"doNotSell\",\n      color: \"primary\"\n    })\n  }), __jsx(\"span\", {\n    className: classes.modalTriggerLable,\n    onClick: modalTriggering\n  }, \"Do not sell my personal information.\"), __jsx(Modal, {\n    fullWidth: true,\n    open: modalState,\n    handleClose: handleClose,\n    iFrame: true,\n    title: __jsx(\"h4\", {\n      className: classes.modalTitle\n    }, \"MY DATA RIGHTS\"),\n    content: getTemplateData && getTemplateData.content.length ? ReactHtmlParser(getTemplateData.content) : null\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.marginNegative\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      onChange: handleCheckboxChange1,\n      name: \"privacyPolicy\",\n      color: \"primary\",\n      checked: templeteCheckboxes.privacyPolicy\n    })\n  }), __jsx(\"span\", {\n    className: classes.modalNoneTriggerText\n  }, \"I accept\"), __jsx(\"span\", {\n    className: classes.modalTriggerLable,\n    onClick: modalTriggering1\n  }, \"privacy policy\"), __jsx(Modal, {\n    fullWidth: true,\n    open: modalOneState,\n    handleClose: handleClose1,\n    iFrame: true // title={<h4 className={classes.modalTitle}>Privacy Policy</h4>}\n    ,\n    content: privayPolicyData && privayPolicyData.content.length ? ReactHtmlParser(privayPolicyData.content) : null\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.marginNegative\n  }, __jsx(FormControlLabel, {\n    control: __jsx(Checkbox, {\n      onChange: handleCheckboxChange1,\n      name: \"termsConditions\",\n      color: \"primary\",\n      checked: templeteCheckboxes.termsConditions\n    })\n  }), __jsx(\"span\", {\n    className: classes.modalNoneTriggerText\n  }, \"I have read and understood\"), __jsx(\"span\", {\n    className: classes.modalTriggerLable,\n    onClick: modalTriggering2\n  }, \"terms and conditions.\"), __jsx(Modal, {\n    fullWidth: true,\n    open: modalTwoState,\n    handleClose: handleClose2,\n    iFrame: true // title={<h4 className={classes.modalTitle}></h4>}\n    ,\n    content: termsNcondtionData && termsNcondtionData.content.length ? ReactHtmlParser(termsNcondtionData.content) : null\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(\"i\", null, __jsx(Typography, {\n    variant: \"subtitle2\"\n  }, \"Fields that are marked with an asterisk (*) sign are required.\"))), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Button, {\n    size: \"large\",\n    variant: \"contained\",\n    disabled: disableState,\n    type: \"submit\",\n    color: \"primary\",\n    fullWidth: true,\n    className: classes.commonBtn\n  }, \"Sign Up\")), props.setSignUpOpen ? __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    align: \"center\",\n    className: classes.cusTextPrimary\n  }, \"Already have an account?\"), __jsx(\"span\", {\n    onClick: () => props.setSignUpOpen(false),\n    className: classes.link\n  }, \"\\xA0 Sign In\"))) : __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    align: \"center\",\n    className: classes.cusTextPrimary\n  }, \"Already have an account?\", \" \", __jsx(Link, {\n    href: \"/signin\"\n  }, __jsx(\"a\", {\n    className: classes.authLink\n  }, __jsx(LearnMoreLink, {\n    title: \"Sign in\"\n  }))))))));\n};\n\nexport default Form;","map":null,"metadata":{},"sourceType":"module"}