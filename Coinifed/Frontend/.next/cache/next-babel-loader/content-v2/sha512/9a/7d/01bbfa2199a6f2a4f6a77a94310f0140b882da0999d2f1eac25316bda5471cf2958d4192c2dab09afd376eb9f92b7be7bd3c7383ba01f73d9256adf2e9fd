{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { LearnMoreLink } from 'components/atoms';\nimport { SectionHeader } from 'components/molecules';\nimport Button from '@material-ui/core/Button';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Grid from '@material-ui/core/Grid';\nimport Avatar from '@material-ui/core/Avatar';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport useTheme from '@material-ui/core/styles/useTheme';\nconst useStyles = makeStyles(theme => ({\n  webinarAvatar: {\n    width: 200,\n    height: 200,\n    border: `${theme.spacing(1)}px solid ${theme.palette.background.paper}`,\n    boxShadow: `0 2px 10px 0 ${theme.palette.cardShadow}`,\n    borderRadius: theme.spacing(2)\n  },\n  listGrid: {\n    overflow: 'hidden',\n    marginBottom: theme.spacing(3),\n    '&:last-child': {\n      marginBottom: theme.spacing(0)\n    }\n  }\n}));\n\nconst Speakers = props => {\n  const {\n    data,\n    className\n  } = props,\n        rest = _objectWithoutProperties(props, [\"data\", \"className\"]);\n\n  const classes = useStyles();\n  const theme = useTheme();\n  const isMd = useMediaQuery(theme.breakpoints.up('md'), {\n    defaultMatches: true\n  });\n  return __jsx(\"div\", _extends({\n    className: className\n  }, rest), __jsx(SectionHeader, {\n    title: \"Meet Our Speakers\",\n    subtitle: \"Book a place to participate to the upcoming webinars organised by our top management team.\",\n    ctaGroup: [__jsx(LearnMoreLink, {\n      title: \"See all speakers\",\n      variant: \"h6\",\n      color: \"primary\"\n    })],\n    fadeUp: true\n  }), __jsx(Grid, {\n    container: true,\n    justifyContent: \"center\"\n  }, data.map((item, index) => __jsx(Grid, {\n    key: index,\n    item: true,\n    container: true,\n    \"data-aos\": 'fade-up',\n    justifyContent: \"space-between\",\n    spacing: isMd ? 4 : 2,\n    className: classes.listGrid,\n    direction: \"row-reverse\"\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12,\n    md: 8\n  }, __jsx(SectionHeader, {\n    label: item.authorName,\n    titleVariant: \"h5\",\n    title: item.title,\n    subtitle: item.description,\n    ctaGroup: [__jsx(Button, {\n      variant: \"contained\",\n      color: \"primary\",\n      size: isMd ? 'large' : 'medium',\n      fullWidth: true\n    }, \"Book now\"), __jsx(Button, {\n      variant: \"outlined\",\n      color: \"primary\",\n      size: isMd ? 'large' : 'medium',\n      fullWidth: true\n    }, \"Learn More\")],\n    align: isMd ? 'left' : 'center',\n    disableGutter: true\n  })), __jsx(Grid, {\n    item: true,\n    container: true,\n    xs: 12,\n    sm: 12,\n    md: 4,\n    justifyContent: isMd ? 'flex-end' : 'center',\n    alignItems: \"center\"\n  }, __jsx(Avatar, _extends({}, item.authorPhoto, {\n    alt: item.authorName,\n    className: classes.webinarAvatar\n  })))))));\n};\n\nexport default Speakers;","map":null,"metadata":{},"sourceType":"module"}