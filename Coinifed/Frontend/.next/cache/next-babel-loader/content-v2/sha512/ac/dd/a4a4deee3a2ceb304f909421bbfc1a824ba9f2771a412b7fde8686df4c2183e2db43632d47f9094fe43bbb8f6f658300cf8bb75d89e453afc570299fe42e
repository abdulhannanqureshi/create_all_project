{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Box from '@material-ui/core/Box';\nimport Button from '@material-ui/core/Button';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Grid from '@material-ui/core/Grid';\nimport Paper from '@material-ui/core/Paper';\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport Typography from '@material-ui/core/Typography';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport DeleteOutlineTwoToneIcon from '@material-ui/icons/DeleteOutlineTwoTone';\nimport LocalMallOutlinedIcon from '@material-ui/icons/LocalMallOutlined';\nimport clsx from 'clsx';\nimport { Modal } from 'components/common';\nimport { Section } from 'components/organisms';\nimport Toast from 'components/toaster';\nimport { ApiRoutes } from 'config';\nimport { ApiHelper } from 'helper';\nimport Link from 'next/link';\nimport React, { useEffect, useState } from 'react';\nimport validate from 'validate.js';\nimport { useStore } from '../../store';\nimport { OrderDetail } from \"./components\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    flexGrow: 1\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: 'center',\n    color: theme.palette.text.secondary\n  },\n  box: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  },\n  box_shadow: {\n    boxShadow: \"rgba(0, 0, 0, 0.02) 0px 1px 3px 0px, rgba(27, 31, 35, 0.15) 0px 0px 0px 1px\"\n  },\n  commonBtn: {\n    display: \"inline-block\",\n    padding: 10,\n    backgroundColor: \"#5120FF\",\n    color: \"#fff\",\n    fontSize: 16,\n    borderRadius: 5,\n    minWidth: 200,\n    border: \"solid 1px #5120FF\",\n    textAlign: \"center\",\n    transition: \"all 0.3s ease-in-out\",\n    \"&:hover\": {\n      backgroundColor: \"#fff\",\n      color: \"#5120FF\"\n    }\n  },\n  cardHeading: {\n    marginLeft: \"22px\"\n  },\n  headingCard: {\n    fontSize: \"30px !important\",\n    marginLeft: \"8px\",\n    marginTop: \"5px\"\n  },\n  flex: {\n    display: \"flex\",\n    alignItems: \"center\"\n  },\n  redIcon: {\n    color: \"red\"\n  },\n  disabledIcon: {\n    color: \"red\",\n    opacity: \"0.4\",\n    cursor: \"not-allowed\"\n  },\n  table: {\n    minWidth: 650\n  },\n  shoppingIcon: {\n    fontSize: \"30px\"\n  },\n  promoCodeBlock: {\n    fontSize: \"16px\"\n  },\n  centering: {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  space_between: {\n    display: \"flex\"\n  },\n  calculationBlock: {\n    paddingBottom: \"15px\"\n  },\n  calcTitle: {\n    paddingRight: \"20px\",\n    textAlign: \"right\",\n    width: \"calc(100% - 150px)\",\n    fontSize: '17px'\n  },\n  collapseSmooth: {\n    transition: \"all 3s ease-out\",\n    boxShadow: 'none'\n  },\n  calcValue: {\n    width: \"150px\",\n    fontSize: '17px',\n    fontWeight: '600',\n    textAlign: 'right',\n    paddingRight: 25\n  },\n  error_msg: {\n    color: \"red\"\n  },\n  success_msg: {\n    color: \"green\"\n  },\n  promoCode: {\n    padding: \"5px 10px\",\n    fontWeight: \"900\",\n    color: \"#f95c20\",\n    border: \"1px solid #f96b36\",\n    margin: \"0px 5px\",\n    borderRadius: \"20px\"\n  },\n  noPromoCode: {\n    opacity: \"0.4\",\n    fontSize: 18,\n    marginLeft: 5\n  },\n  cardHeader: {\n    backgroundColor: \"#5120ff\"\n  },\n  text_white: {\n    color: \"white\"\n  },\n  rightSide: {\n    display: \"flex\",\n    justifyContent: \"end\"\n  },\n  buttonBox: {\n    display: \"flex\",\n    justifyContent: \"end\"\n  },\n  distance_apart: {\n    display: \"flex\",\n    justifyContent: \"space-between\"\n  },\n  margin_right: {\n    marginRight: \"32px\",\n    paddingRight: \"20px\"\n  },\n  emptyCart: {\n    padding: \"30px 20px\",\n    textAlign: \"center\"\n  },\n  apply_field: {\n    \"& .MuiOutlinedInput-root\": {\n      borderTopRightRadius: 0,\n      borderBottomRightRadius: 0\n    }\n  },\n  apply_promo_btn: {\n    minWidth: 120,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n    boxShadow: 'none'\n  },\n  paymentLoader: {\n    position: 'fixed',\n    zIndex: '10',\n    top: '0',\n    left: '0',\n    width: '100%',\n    height: '100%',\n    background: 'rgba(0,0,0,0.4)',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column'\n  }\n}));\nconst schema = {\n  cardHolderName: {\n    presence: {\n      allowEmpty: false,\n      message: 'is required'\n    },\n    length: {\n      maximum: 120\n    }\n  },\n  cardNumber: {\n    presence: {\n      allowEmpty: false,\n      message: 'is required'\n    },\n    length: {\n      minimum: 19,\n      maximum: 19\n    }\n  },\n  expiry: {\n    presence: {\n      allowEmpty: false,\n      message: 'is required'\n    }\n  },\n  cvc: {\n    presence: {\n      allowEmpty: false,\n      message: 'is required'\n    },\n    length: {\n      minimum: 3,\n      maximum: 3\n    }\n  }\n};\n\nconst AddCard = props => {\n  const {\n    authToken\n  } = props;\n  const classes = useStyles();\n  const theme = useTheme();\n  const {\n    0: promoCode,\n    1: setPromoCode\n  } = useState([]);\n  const {\n    0: OrderTotal,\n    1: setOrderTotal\n  } = useState(\"\");\n  const {\n    0: loader,\n    1: setLoader\n  } = useState(false);\n  const {\n    0: couponLoader,\n    1: setCouponLoader\n  } = useState(false);\n  const {\n    0: formError,\n    1: setFormError\n  } = useState('');\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n  const {\n    0: successMsg,\n    1: setSuccessMsg\n  } = useState('');\n  const {\n    0: coupanValue,\n    1: setCoupanValue\n  } = useState('');\n  const {\n    0: coupanCode,\n    1: setCoupanCode\n  } = useState('');\n  const {\n    0: promoId,\n    1: setPromoId\n  } = useState('');\n  const [formState, setFormState] = React.useState({\n    isValid: false,\n    values: {},\n    touched: {},\n    errors: {}\n  });\n  const isMd = useMediaQuery(theme.breakpoints.up('md'), {\n    defaultMatches: true\n  });\n  const {\n    0: SelectedData,\n    1: setSelectedData\n  } = useState([]);\n  const {\n    0: parentid,\n    1: setParentId\n  } = useState([]);\n  const {\n    0: moduleIdApi,\n    1: setModuleIdApi\n  } = useState([]);\n  const {\n    0: generalPromoCode,\n    1: setGeneralPromoCode\n  } = useState([]);\n  const {\n    0: isCompleteCourse,\n    1: setIscompleteCourse\n  } = useState(false);\n  const {\n    0: completeCourseDetails,\n    1: setCompleteCourseDetails\n  } = useState([]);\n  const {\n    0: orderModalOpen,\n    1: setOrderModalOpen\n  } = useState(false);\n  const {\n    0: checkoutModules,\n    1: setCheckoutModules\n  } = useState([]);\n  const {\n    0: loaderDashboard,\n    1: setLoaderDashboard\n  } = useState(false);\n\n  const handleLoader = status => {\n    setLoaderDashboard(status);\n\n    if (status) {\n      setSelectedData([]);\n    }\n  };\n\n  const {\n    0: cancelBtn,\n    1: setCancelBtn\n  } = useState(false);\n\n  const handleCancelBtn = status => {\n    setCancelBtn(status);\n  };\n\n  const getTotalPrice = (cartList, parentId) => {\n    const cartModule = cartList.filter(ev => ev.parentId === parentId || ev._id === parentId);\n    if (!cartModule.length) return 0;\n    return cartModule.map(e => e.amount).reduce((n, r) => +n + +r);\n  };\n\n  const getTotal = cartList => {\n    const getAllCourse = JSON.parse(localStorage.getItem(\"allCourseModules\"));\n\n    if (getAllCourse && getAllCourse.length) {\n      let allModulesData = getAllCourse.map(e => ({\n        parentId: e._id,\n        moduleLength: e.modules ? e.modules.length : \"\",\n        price: e.price\n      }));\n      const cartDistribute = allModulesData.map(e => ({\n        parentId: e.parentId,\n        moduleLength: e.moduleLength,\n        courses: cartList.filter(ev => ev.parentId === e.parentId),\n        price: e.moduleLength && e.moduleLength === cartList.filter(ev => ev.parentId === e.parentId).filter(e => !e.labId).length ? +e.price : getTotalPrice(cartList, e.parentId)\n      }));\n      return cartDistribute.map(e => e.price).length ? cartDistribute.map(e => e.price).reduce((n, p) => +n + +p) : 0;\n    }\n\n    return 0;\n  }; // For Save Money\n  // const isSaveMoney = (cartList) => {\n  //   const totalCartAmount = cartList.map(e => e.amount).reduce((n, p) => +n + +p);\n  //   const disCartAmount = getTotal(cartList);\n  //   return totalCartAmount - disCartAmount;\n  // }\n  // For lab free\n\n\n  const isLabFree = (parentId, cartList) => {\n    const getAllCourse = JSON.parse(localStorage.getItem(\"allCourseModules\"));\n    let moduleLength = \"\";\n\n    if (getAllCourse && getAllCourse.length) {\n      moduleLength = getAllCourse.find(e => e._id === parentId).modules.length;\n    }\n\n    let catModuleLength = cartList.filter(ev => ev.parentId === parentId).filter(e => !e.labId).length;\n    return moduleLength === catModuleLength;\n  }; //getting data from local storage\n\n\n  useEffect(() => {\n    const getSessionStored = JSON.parse(localStorage.getItem(\"SelectedCourseModules\"));\n    const allCourseModules = JSON.parse(localStorage.getItem(\"allCourseModules\"));\n\n    if (allCourseModules !== null) {\n      setCompleteCourseDetails(allCourseModules);\n    }\n\n    const GeneralPromoCode = JSON.parse(localStorage.getItem(\"GeneralPromoCode\"));\n\n    if (GeneralPromoCode !== null) {\n      setGeneralPromoCode(GeneralPromoCode);\n    }\n\n    const promoCode = JSON.parse(localStorage.getItem(\"promoCode\"));\n    const ParentIds = JSON.parse(localStorage.getItem(\"parentIds\"));\n\n    if (getSessionStored && getSessionStored.length) {\n      setSelectedData(getSessionStored);\n    }\n\n    if (promoCode && promoCode.length) {\n      setPromoCode(promoCode);\n    }\n  }, []); //re-rendering after the deleting from the cards\n\n  useEffect(() => {\n    if (SelectedData && SelectedData.length) {\n      localStorage.setItem(\"SelectedCourseModules\", JSON.stringify(SelectedData));\n\n      if (SelectedData.length) {\n        let Code = SelectedData.map(xyz => {\n          return xyz.promoCode;\n        });\n        let arrayPromoCode = [].concat(...removeDuplicates(Code, \"promoCode\"));\n\n        if (arrayPromoCode && arrayPromoCode.length) {\n          setPromoCode(arrayPromoCode);\n        }\n\n        let countTotal = SelectedData.map(item => item.amount).reduce((prev, next) => parseInt(prev) + parseInt(next));\n        setOrderTotal(countTotal);\n        let parentIdentity = SelectedData.map(xyz => xyz.parentId);\n        let resultingParentIds = removeDuplicates(parentIdentity, \"parentId\");\n        setParentId(resultingParentIds);\n      }\n    } else {\n      setOrderTotal(\"\");\n    }\n  }, [SelectedData]);\n  useEffect(() => {\n    const errors = validate(formState.values, schema);\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      isValid: errors ? false : true,\n      errors: errors || {}\n    }));\n  }, [formState.values]); ///remove duplicacy\n\n  function removeDuplicates(originalArray) {\n    var seen = {};\n    return originalArray.filter(function (item) {\n      return seen.hasOwnProperty(item) ? false : seen[item] = true;\n    });\n  } //removing course from cards\n\n\n  const deleteSelected = id => {\n    if (SelectedData && SelectedData.length) {\n      const result = SelectedData.filter(data => data._id !== id);\n      setSelectedData(result);\n      setCoupanCode('');\n      setPromoId('');\n      setCoupanValue('');\n      setFormState(_objectSpread(_objectSpread({}, formState), {}, {\n        values: {}\n      }));\n\n      if (result.length === 0) {\n        localStorage.setItem(\"SelectedCourseModules\", JSON.stringify([]));\n      }\n    }\n  }; //handling text for the coupon\n\n\n  const handleChange = event => {\n    event.persist();\n    setCoupanValue(event.target.value);\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      values: _objectSpread(_objectSpread({}, formState.values), {}, {\n        [event.target.name]: event.target.value\n      }),\n      touched: _objectSpread(_objectSpread({}, formState.touched), {}, {\n        [event.target.name]: true\n      })\n    }));\n    setFormError('');\n  }; // For get parent ids\n\n\n  const {\n    0: moduleParentIds,\n    1: setModuleParentIds\n  } = useState([]);\n  useEffect(props => {\n    let getParentsId = JSON.parse(localStorage.getItem('parentIds'));\n\n    if (getParentsId && getParentsId.length) {\n      setModuleParentIds(getParentsId);\n    }\n  }, []); ///filtering id wrt to parent id\n\n  const filterIds = () => {\n    let testingArray = [];\n    const result = group(SelectedData, 'parentId');\n\n    function group(arr, key) {\n      return [...arr.reduce((acc, o) => acc.set(o[key], (acc.get(o[key]) || []).concat(o)), new Map()).values()];\n    }\n\n    let getWithOutLabelId = SelectedData.filter(e => !e.labId);\n    let getLabelId = SelectedData.filter(e => e.labId);\n    let getLabObj = [];\n    getLabelId.map(e => {\n      getLabObj.push({\n        parentId: e._id,\n        labId: e.labId\n      });\n    });\n    let moduleIds = [];\n    moduleParentIds.map(parentId => {\n      let getLabIds = getLabObj.filter(e => e.parentId === parentId);\n      let getModules = getWithOutLabelId.filter(e => e.parentId === parentId);\n\n      if (getModules && getModules.length) {\n        let getIds = getModules.map(e => e._id);\n        moduleIds.push({\n          moduleIds: getIds,\n          courseId: parentId\n        });\n      } else {\n        if (getLabIds && getLabIds.length) {\n          moduleIds.push({\n            moduleIds: [],\n            courseId: parentId\n          });\n        }\n      }\n    }); ////Balvinder  starts coding\n\n    const apiDataPureArray = [];\n    const courseData = completeCourseDetails.map(e => {\n      return apiDataPureArray.push({\n        parentId: e._id,\n        moduleLength: e.modules ? e.modules.length : \"\"\n      });\n    });\n\n    const FinalFunction = cartItem => {\n      let labPurchasedVariable = completeCourseDetails.filter(e => e._id === cartItem.courseId);\n      const labPurchasedValue = labPurchasedVariable[0].lab.labPurchased;\n      let getCurrentItem = apiDataPureArray.filter(e => e.parentId === cartItem.courseId);\n\n      if (!labPurchasedValue) {\n        if (getCurrentItem[0].moduleLength === cartItem.moduleIds.length) return true;\n      } else return false;\n    }; ////Balvinder  ends the coding....\n\n\n    if (moduleIds && moduleIds.length) {\n      moduleIds.map(e => {\n        let labId = completeCourseDetails.filter(ev => ev._id === e.courseId).map(labId => labId.lab._id);\n\n        if (typeof labId[0] == \"undefined\") {\n          labId = null;\n        }\n\n        let getLabId = getLabObj.filter(item => item.parentId === e.courseId).map(e => e.labId);\n        testingArray.push(_objectSpread(_objectSpread({}, e), {}, {\n          moduleIds: e.moduleIds.length ? e.moduleIds : null,\n          labId: FinalFunction(e) ? labId : getLabId[0] ? getLabId[0] : null,\n          isCourseComplete: FinalFunction(e)\n        }));\n      });\n    } else {\n      getLabObj.map(e => {\n        testingArray.push({\n          moduleIds: null,\n          courseId: e.parentId,\n          labId: e.labId,\n          isCourseComplete: false\n        });\n      });\n    }\n\n    return testingArray;\n  }; //handle coupan after the button click\n\n\n  const handleApplyCoupon = () => {\n    if (!formState.values.couponValue) {\n      setError(\"Please enter a valid Coupon code\");\n    } else {\n      let one = filterIds();\n      setCouponLoader(true);\n      setCoupanValue(formState.values.couponValue);\n      applyCoupon({\n        'promoCode': formState.values.couponValue,\n        'moduleId': one\n      });\n    }\n  }; //for applying promocode\n\n\n  const applyCoupon = async data => {\n    const response = await new ApiHelper().FetchFromServer(ApiRoutes.APPLYCOUPON.service, ApiRoutes.APPLYCOUPON.url, ApiRoutes.APPLYCOUPON.method, ApiRoutes.APPLYCOUPON.authenticate, authToken, undefined, data);\n\n    if (response && !response.isError) {\n      const data = response.data.data;\n      setCoupanCode(data);\n      setCouponLoader(false);\n      setSuccessMsg(response.data.message);\n      setPromoId(response.data.data.promoId);\n      Toast.fire({\n        icon: 'success',\n        title: response.messages[0]\n      });\n      setError(\"\");\n    } else {\n      setError(\"\");\n      Toast.fire({\n        icon: 'error',\n        title: response.messages[0]\n      });\n      setCouponLoader(false);\n    }\n  }; //copying promocode\n\n\n  const copyToClipboard = code => {\n    navigator.clipboard.writeText(code);\n    Toast.fire({\n      icon: 'success',\n      title: \"Promo Code copied.\"\n    });\n  }; ///order modal opening\n\n\n  const orderDetailOpen = () => {\n    const token = localStorage.getItem(\"token\");\n\n    if (token) {\n      let one = filterIds();\n      setCheckoutModules(one);\n      setOrderModalOpen(true);\n    }\n  }; // const [count, setCount] = useState(0)\n\n\n  const handleOrderModalClose = () => {\n    setOrderModalOpen(false);\n  }; // For Cart Icon item remove\n\n\n  const {\n    removeCartHandler\n  } = useStore();\n  return __jsx(React.Fragment, null, __jsx(Section, null, loaderDashboard ? __jsx(\"div\", {\n    className: classes.paymentLoader\n  }, __jsx(Box, null, __jsx(CircularProgress, null))) : \"\", __jsx(Card, {\n    className: classes.root\n  }, __jsx(CardHeader, {\n    className: classes.cardHeader,\n    title: __jsx(\"div\", {\n      className: clsx(classes.flex, classes.text_white)\n    }, __jsx(\"span\", null, \"Cart\"), __jsx(LocalMallOutlinedIcon, {\n      className: classes.headingCard\n    })),\n    titleTypographyProps: {\n      variant: 'h4'\n    }\n  }), __jsx(CardContent, null, __jsx(\"div\", {\n    className: classes.root,\n    className: classes.box\n  }, __jsx(Box, {\n    width: 1100,\n    className: classes.box_shadow\n  }, __jsx(Grid, {\n    container: true\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(TableContainer, {\n    component: Paper,\n    className: classes.collapseSmooth\n  }, __jsx(Table, {\n    className: classes.table,\n    \"aria-label\": \"simple table\"\n  }, __jsx(TableHead, null, __jsx(TableRow, null, __jsx(TableCell, null, \"S.No\"), __jsx(TableCell, null, \"Course name\"), __jsx(TableCell, null, \"Module name\"), __jsx(TableCell, null, \"Price($)\"), __jsx(TableCell, null, \"Remove\"))), __jsx(TableBody, null, SelectedData && SelectedData.length ? SelectedData.map((row, index) => __jsx(TableRow, {\n    key: row._id\n  }, __jsx(TableCell, {\n    component: \"th\",\n    scope: \"row\"\n  }, index + 1), __jsx(TableCell, null, row.title), __jsx(TableCell, null, row.moduleName), !row.labId ? __jsx(TableCell, null, row.amount) : isLabFree(row._id, SelectedData) ? __jsx(TableCell, null, __jsx(Tooltip, {\n    title: \"On purchase of complete course lab is free*\",\n    placement: \"top\",\n    arrow: true,\n    className: classes.tooltipWar\n  }, __jsx(\"s\", null, row.amount))) : __jsx(TableCell, null, row.amount), __jsx(TableCell, null, __jsx(\"div\", {\n    title: \"remove\"\n  }, !row.labId ? __jsx(DeleteOutlineTwoToneIcon, {\n    className: classes.redIcon,\n    onClick: () => {\n      deleteSelected(row._id);\n      removeCartHandler();\n    }\n  }) : isLabFree(row._id, SelectedData) ? __jsx(DeleteOutlineTwoToneIcon, {\n    className: classes.disabledIcon\n  }) : __jsx(DeleteOutlineTwoToneIcon, {\n    className: classes.redIcon,\n    onClick: () => {\n      deleteSelected(row._id);\n      removeCartHandler();\n    }\n  }))))) : __jsx(TableRow, null, __jsx(TableCell, {\n    colSpan: 5\n  }, __jsx(\"div\", {\n    className: classes.emptyCart\n  }, __jsx(Typography, {\n    variant: \"h5\"\n  }, \"Your Cart is empty\"))))))), __jsx(Grid, {\n    container: true,\n    mt: 5,\n    className: classes.distance_apart\n  }, OrderTotal > 0 ? __jsx(Grid, {\n    item: true,\n    xs: 6\n  }, __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"center\",\n    ml: 2,\n    mt: 5\n  }, __jsx(TextField, {\n    placeholder: \"Coupon Code\",\n    label: \"Coupon Code\",\n    variant: \"outlined\",\n    size: \"medium\",\n    name: \"couponValue\",\n    fullWidth: true,\n    type: \"couponValue\",\n    onChange: handleChange,\n    value: coupanValue ? coupanValue : formState.values.couponValue || '',\n    className: classes.apply_field\n  }), couponLoader ? __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    className: classes.apply_btn\n  }, \"Processing....\") : __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    className: classes.apply_promo_btn,\n    onClick: handleApplyCoupon\n  }, \"Apply Code\")), __jsx(Box, {\n    display: \"flex\",\n    ml: 2\n  }, __jsx(\"p\", {\n    className: classes.error_msg\n  }, error))) : null, __jsx(Grid, {\n    xs: 6,\n    item: true,\n    mt: 5,\n    className: classes.centering\n  }, OrderTotal > 0 ? __jsx(Grid, {\n    xs: 12,\n    item: true\n  }, __jsx(Box, {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    className: classes.calculationBlock,\n    mt: 5\n  }, __jsx(Box, {\n    className: classes.calcTitle\n  }, \"Order total:\"), __jsx(Box, {\n    className: classes.calcValue\n  }, getTotal(SelectedData) ? `$${getTotal(SelectedData).toFixed(2)}` : 'N.A')), __jsx(Box, {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    className: classes.calculationBlock\n  }, __jsx(Box, {\n    className: classes.calcTitle\n  }, \"Coupon Discount:\"), __jsx(Box, {\n    className: classes.calcValue\n  }, \"$\", coupanCode.discountedAmount ? `${coupanCode.discountedAmount}` : 0)), __jsx(Box, {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    className: classes.calculationBlock\n  }, __jsx(Box, {\n    className: classes.calcTitle\n  }, \"Grand total:\"), __jsx(Box, {\n    className: classes.calcValue\n  }, coupanCode.grandTotal ? `$${coupanCode.grandTotal}` : getTotal(SelectedData) ? `$${getTotal(SelectedData).toFixed(2)}` : 0))) : null)), __jsx(Box, {\n    className: classes.buttonBox\n  }, __jsx(Box, {\n    my: 1,\n    mx: 2,\n    className: classes.rightSide\n  }, __jsx(Link, {\n    href: \"/courses\"\n  }, __jsx(\"a\", {\n    className: clsx(classes.commonBtn)\n  }, \"Continue Shopping\"))), OrderTotal > 0 ? __jsx(Box, {\n    my: 1,\n    mx: 2,\n    className: classes.rightSide\n  }, __jsx(Button, {\n    variant: \"outlined\",\n    onClick: orderDetailOpen,\n    className: classes.commonBtn\n  }, \"Checkout\")) : null)))))))), __jsx(Modal, {\n    fullWidth: false,\n    maxWidth: \"sm\",\n    open: orderModalOpen,\n    handleClose: !cancelBtn ? handleOrderModalClose : null,\n    iFrame: false,\n    title: \"\",\n    content: __jsx(OrderDetail, {\n      modualData: \"this\",\n      selectedId: checkoutModules,\n      courseId: \"\",\n      handleOrderModalClose: handleOrderModalClose,\n      courseTitle: \"\",\n      promoId: promoId ? promoId : null,\n      handleLoader: handleLoader,\n      handleCancelBtn: handleCancelBtn,\n      authToken: authToken\n    })\n  }));\n};\n\nexport default AddCard;","map":null,"metadata":{},"sourceType":"module"}