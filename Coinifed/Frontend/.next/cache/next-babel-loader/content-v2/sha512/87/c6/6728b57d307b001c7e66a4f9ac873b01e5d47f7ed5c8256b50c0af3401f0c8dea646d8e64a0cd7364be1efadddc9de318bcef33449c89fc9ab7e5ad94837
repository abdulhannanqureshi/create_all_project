{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport Swal from 'sweetalert2';\nimport InputMask from 'react-input-mask';\nimport { ApiHelper } from 'helper';\nimport { ApiRoutes } from 'config';\nimport validate from 'validate.js';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport useTheme from '@material-ui/core/styles/useTheme';\nimport Button from '@material-ui/core/Button';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport TextField from '@material-ui/core/TextField';\nimport Box from '@material-ui/core/Box';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport blue from '@material-ui/core/colors/blue';\nimport Toast from 'components/toaster';\nimport { Section } from 'components/organisms';\nimport router from 'next/router';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& .MuiTextField-root': {\n      backgroundColor: '#fff'\n    }\n  },\n  sectionDescription: {\n    background: blue[900]\n  },\n  sectionAlternateForm: {\n    background: 'transparent',\n    backgroundImage: `linear-gradient(180deg, ${theme.palette.background.paper} 300px, ${theme.palette.primary.dark} 0%)`\n  },\n  textWhite: {\n    color: '#fff'\n  },\n  error_msg: {\n    color: \"red\"\n  },\n  success_msg: {\n    color: \"green\"\n  },\n  heroContainer: {\n    minWidth: \"1236px\"\n  },\n  contentSection: {\n    minHeight: \"500px\",\n    position: \"relative\",\n    '& p': {\n      fontSize: \"18px\",\n      lineHeight: \"28px\"\n    }\n  },\n  sectionHeader: {\n    paddingBottom: \"30px\",\n    borderBottom: \"1px solid #ddd\",\n    marginBottom: \"20px\"\n  },\n  listItem: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  modualWrap: {\n    borderBottom: \"1px solid #ddd\",\n    marginBottom: \"20px\"\n  },\n  modualAmount: {\n    width: \"100px\",\n    fontWeight: \"700\"\n  },\n  modualList: {\n    fontSize: \"18px\",\n    position: \"relative\",\n    paddingLeft: \"20px\",\n    paddingBottom: \"20px\",\n    fontWeight: \"300\",\n    color: \"#020202\",\n    '&::before': {\n      content: ' \"\" ',\n      display: \"block\",\n      width: \"10px\",\n      height: \"10px\",\n      position: \"absolute\",\n      backgroundColor: '#000',\n      top: '5px',\n      left: '0px',\n      borderRadius: \"50%\"\n    }\n  },\n  calculationBlock: {\n    paddingBottom: \"15px\"\n  },\n  calcTitle: {\n    paddingRight: \"20px\",\n    textAlign: \"right\",\n    width: \"calc(100% - 100px)\",\n    fontSize: '18px'\n  },\n  calcValue: {\n    width: \"100px\",\n    fontSize: '18px',\n    fontWeight: '800'\n  },\n  apply_btn: {\n    width: \"200px\"\n  },\n  paymentWrap: {\n    backgroundColor: \"#eeeeee85\",\n    border: \"1px solid #ddd\"\n  },\n  paymentLoader: {\n    position: 'absolute',\n    zIndex: '10',\n    top: '0',\n    left: '0',\n    width: '100%',\n    height: '100%',\n    background: '#fff',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column'\n  },\n  formError: {\n    color: \"red\",\n    fontSize: \"18px\"\n  },\n  cardInput: {\n    border: \"1px solid rgba(0, 0, 0, 0.23)\",\n    padding: \"18.5px 14px\",\n    height: \"1.1876em\",\n    margin: \"0\",\n    display: \"block\",\n    minWidth: \"0\",\n    background: \"none\",\n    // boxSizing: \"content-box\",\n    letterSpacing: \"inherit\",\n    animationDuration: \"10ms\",\n    borderRadius: \"4px\",\n    backgroundColor: \"#fff\",\n    height: \"61px\",\n    fontSize: \"1rem\",\n    width: \"100%\"\n  },\n  promoCodeBlock: {\n    fontSize: \"16px\"\n  },\n  promoCode: {\n    padding: \"5px 10px\",\n    fontWeight: \"900\",\n    color: \"#f95c20\",\n    border: \"1px solid #f96b36\",\n    margin: \"0px 5px\",\n    borderRadius: \"20px\"\n  },\n  paymentButton: {\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    padding: '10px 30px',\n    color: '#fff',\n    fontWeight: '900',\n    fontSize: '16px',\n    width: \"100%\"\n  },\n  fontWeight700: {\n    fontWeight: \"700\"\n  }\n}));\nconst schema = {\n  cardHolderName: {\n    presence: {\n      allowEmpty: false,\n      message: 'is required'\n    },\n    length: {\n      maximum: 120\n    }\n  },\n  cardNumber: {\n    presence: {\n      allowEmpty: false,\n      message: 'is required'\n    },\n    length: {\n      minimum: 19,\n      maximum: 19\n    }\n  },\n  expiry: {\n    presence: {\n      allowEmpty: false,\n      message: 'is required'\n    }\n  },\n  cvc: {\n    presence: {\n      allowEmpty: false,\n      message: 'is required'\n    },\n    length: {\n      minimum: 3,\n      maximum: 3\n    }\n  }\n};\n\nconst OrderDetail = props => {\n  const classes = useStyles();\n  const {\n    modualData,\n    selectedId,\n    courseId,\n    courseTitle,\n    promoId\n  } = props;\n  const {\n    0: loader,\n    1: setLoader\n  } = useState(false);\n  const {\n    0: couponLoader,\n    1: setCouponLoader\n  } = useState(false);\n  const {\n    0: paymentStatusLoader,\n    1: setPaymentStatusLoader\n  } = useState(true);\n  const {\n    0: paymentloader,\n    1: setPaymentLoader\n  } = useState(false);\n  const {\n    0: modualFinal,\n    1: setModualFinal\n  } = useState([]);\n  const {\n    0: countTotal,\n    1: setCountTotal\n  } = useState(0);\n  const {\n    0: countDiscountTotal,\n    1: setCountDiscountTotal\n  } = useState(0);\n  const {\n    0: countDiscountValue,\n    1: setCountDiscountValue\n  } = useState(0); // As per condition 4 module 1000 and 8 module 2000\n\n  const {\n    0: isCompleteCourse,\n    1: setIsCompleteCourse\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n  const {\n    0: formError,\n    1: setFormError\n  } = useState('');\n  const {\n    0: successMsg,\n    1: setSuccessMsg\n  } = useState('');\n  const {\n    0: coupanValue,\n    1: setCoupanValue\n  } = useState('');\n  const {\n    0: coupanCode,\n    1: setCoupanCode\n  } = useState('');\n  const [formState, setFormState] = React.useState({\n    isValid: false,\n    values: {},\n    touched: {},\n    errors: {}\n  });\n  const theme = useTheme();\n  const isMd = useMediaQuery(theme.breakpoints.up('md'), {\n    defaultMatches: true\n  });\n  useEffect(props => {\n    fetchUserData();\n  }, []);\n  useEffect(() => {\n    const errors = validate(formState.values, schema);\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      isValid: errors ? false : true,\n      errors: errors || {}\n    }));\n  }, [formState.values]);\n  useEffect(() => {\n    const modualData = [];\n    setModualFinal(props.selectedId);\n  }, [modualData]);\n\n  const handleChange = event => {\n    event.persist();\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      values: _objectSpread(_objectSpread({}, formState.values), {}, {\n        [event.target.name]: event.target.value\n      }),\n      touched: _objectSpread(_objectSpread({}, formState.touched), {}, {\n        [event.target.name]: true\n      })\n    }));\n    setFormError('');\n  };\n\n  const fetchUserData = async () => {\n    const response = await new ApiHelper().FetchFromServer(ApiRoutes.GETUSERDETAILS.service, ApiRoutes.GETUSERDETAILS.url, ApiRoutes.GETUSERDETAILS.method, ApiRoutes.GETUSERDETAILS.authenticate, undefined, undefined);\n\n    if (response && !response.isError) {\n      const data = response.data.data;\n      setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n        values: {\n          firstName: data.firstName,\n          lastName: data.lastName,\n          email: data.email\n        }\n      }));\n      setLoader(false);\n    } else {\n      Toast.fire({\n        icon: 'error',\n        title: \"Something went wrong\"\n      });\n      router.push('/signin');\n      localStorage.setItem('orderDetails', '');\n    }\n  };\n\n  const handlePayment = () => {\n    if (formState.isValid) {\n      const {\n        firstName,\n        lastName,\n        email,\n        cardHolderName,\n        cardNumber,\n        cvc,\n        expiry\n      } = formState.values;\n      const getCurrentYear = new Date().getFullYear();\n      const currentYear = getCurrentYear.toString().substring(2);\n      const card_exp_month = expiry.substring(0, 2);\n      const card_exp_year = expiry.substring(3);\n\n      if (card_exp_month > 12) {\n        setFormError(\"Please enter a valid month\");\n        return;\n      }\n\n      if (card_exp_year < currentYear) {\n        setFormError(\"Card expiry can not be set to less than current year\");\n        return;\n      }\n\n      const data = {\n        email,\n        name: `${firstName}${lastName}`,\n        cardNumber: cardNumber.replace(/\\s/g, \"\"),\n        cardExpMonth: card_exp_month,\n        cardExpYear: card_exp_year,\n        cardCvc: cvc,\n        cardName: cardHolderName,\n        promoId: promoId,\n        moduleId: modualFinal\n      };\n      makePayment(data);\n    } else {\n      setFormError(\"Please fill all required details\");\n    }\n  };\n\n  const makePayment = async data => {\n    setPaymentLoader(true);\n    const response = await new ApiHelper().FetchFromServer(ApiRoutes.MAKEPAYMENT.service, ApiRoutes.MAKEPAYMENT.url, ApiRoutes.MAKEPAYMENT.method, ApiRoutes.MAKEPAYMENT.authenticate, undefined, data);\n\n    if (response && !response.isError) {\n      const data = response.data.data;\n      Toast.fire({\n        icon: 'success',\n        title: \"Payment successfull\"\n      });\n      props.handleOrderModalClose();\n      props.handleLoader(true);\n      localStorage.setItem(\"SelectedCourseModules\", JSON.stringify([]));\n      localStorage.setItem(\"purchaseCompleteCourse\", JSON.stringify({}));\n      alertBox();\n    } else {\n      Toast.fire({\n        icon: 'error',\n        title: response.message\n      });\n      setFormError(response.messages[0]);\n      setPaymentLoader(false);\n    }\n  };\n\n  const alertBox = () => {\n    Swal.fire({\n      text: 'Your Order has been Successfully Placed',\n      padding: '2em',\n      showDenyButton: false,\n      showCancelButton: false,\n      confirmButtonColor: '#3085d6',\n      confirmButtonText: 'Go  To Dashboard'\n    }).then(result => {\n      router.push('/dashboard?pid=billing');\n    });\n  };\n\n  const hasError = field => formState.touched[field] && formState.errors[field] ? true : false;\n\n  return __jsx(\"div\", null, __jsx(Box, {\n    className: classes.contentSection\n  }, paymentloader ? __jsx(\"div\", {\n    className: classes.paymentLoader\n  }, __jsx(Box, null, __jsx(CircularProgress, null)), __jsx(Box, {\n    pt: 2\n  }, __jsx(Typography, {\n    variant: \"h6\"\n  }, \"Please Wait....\")), __jsx(Box, null, __jsx(Typography, {\n    variant: \"h6\"\n  }, \"Don't refresh page or don't use back button while payment is in progress.\"))) : \"\", !loader ? __jsx(React.Fragment, null, __jsx(Grid, {\n    container: true\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12,\n    md: 12\n  }, __jsx(Box, {\n    p: 2,\n    className: clsx(classes.paymentWrap, classes.root)\n  }, __jsx(Typography, {\n    variant: isMd ? 'h5' : 'body1',\n    className: clsx(classes.fontWeight700, classes.sectionHeader)\n  }, \"Payment Details\"), __jsx(Grid, {\n    container: true,\n    spacing: isMd ? 2 : 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"First Name\"), __jsx(TextField, {\n    placeholder: \"First name*\",\n    label: \"\",\n    variant: \"outlined\",\n    size: \"medium\",\n    fullWidth: true,\n    name: \"firstName\",\n    type: \"firstName\",\n    error: hasError('firstName'),\n    value: formState.values.firstName || ''\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"Last Name\"), __jsx(TextField, {\n    placeholder: \"Last Name *\",\n    label: \"\",\n    variant: \"outlined\",\n    size: \"medium\",\n    fullWidth: true,\n    name: \"lastName\",\n    type: \"lastName\",\n    value: formState.values.lastName || ''\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"E-mail\"), __jsx(TextField, {\n    placeholder: \"Email\",\n    label: \"\",\n    variant: \"outlined\",\n    size: \"medium\",\n    fullWidth: true,\n    name: \"email\",\n    type: \"email\",\n    value: formState.values.email || ''\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"Card Details*\")), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"Card Number*\"), __jsx(InputMask, {\n    mask: \"9999-9999-9999-9999\",\n    maskChar: \" \",\n    onChange: handleChange,\n    value: formState.values.cardNumber || ''\n  }, inputProps => __jsx(TextField, {\n    placeholder: \"9999-9999-9999-9999\",\n    label: \"\",\n    variant: \"outlined\",\n    size: \"medium\",\n    fullWidth: true,\n    name: \"cardNumber\",\n    helpertext: hasError('cardNumber') ? formState.errors.cardNumber[0] : null,\n    error: hasError('cardNumber')\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 6,\n    sm: 6\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"Expiry* (MM-YY)\"), __jsx(InputMask, {\n    mask: \"99-99\",\n    maskChar: \" \",\n    onChange: handleChange,\n    value: formState.values.expiry || ''\n  }, inputProps => __jsx(TextField, {\n    placeholder: \"MM-YY\",\n    label: \"\",\n    variant: \"outlined\",\n    size: \"medium\",\n    fullWidth: true,\n    name: \"expiry\",\n    helpertext: hasError('expiry') ? formState.errors.expiry[0] : null,\n    error: hasError('expiry')\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 6,\n    sm: 6\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"CVC*\"), __jsx(TextField // placeholder=\"CVC*\"\n  , {\n    label: \"\",\n    variant: \"outlined\",\n    size: \"medium\",\n    type: \"password\",\n    fullWidth: true,\n    name: \"cvc\",\n    onChange: handleChange,\n    value: formState.values.cvc || '',\n    helpertext: hasError('cvc') ? formState.errors.cvc[0] : null,\n    error: hasError('cvc')\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"Card Holder Name*\"), __jsx(TextField, {\n    placeholder: \"Card holder name*\",\n    label: \"\",\n    variant: \"outlined\",\n    size: \"medium\",\n    fullWidth: true,\n    name: \"cardHolderName\",\n    helpertext: hasError('cardHolderName') ? formState.errors.cardHolderName[0] : null,\n    error: hasError('cardHolderName'),\n    type: \"cardHolderName\",\n    onChange: handleChange,\n    value: formState.values.cardHolderName || ''\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: handlePayment,\n    size: \"large\",\n    className: classes.paymentButton\n  }, \"Make Payment\")), __jsx(Box, {\n    className: classes.formError,\n    pt: 3\n  }, formError)))))) : \"\"));\n};\n\nexport default OrderDetail;","map":null,"metadata":{},"sourceType":"module"}