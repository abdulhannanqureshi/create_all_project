{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport { CircularProgress } from '@material-ui/core';\nimport indigo from '@material-ui/core/colors/indigo';\nimport FormControl from '@material-ui/core/FormControl';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport OutlinedInput from '@material-ui/core/OutlinedInput';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport clsx from 'clsx';\nimport { Icon } from 'components/atoms';\nimport { SectionHeader } from 'components/molecules';\nimport { Section } from 'components/organisms';\nimport Toast from 'components/toaster';\nimport React, { useEffect, useState } from 'react';\nimport validate from 'validate.js';\nimport { ApiRoutes } from \"../../../../config/ApiRoutes\";\nimport { ApiHelper } from \"../../../../helper\";\nconst schema = {\n  email: {\n    presence: {\n      allowEmpty: false,\n      message: 'is required'\n    },\n    email: true,\n    length: {\n      maximum: 120\n    }\n  }\n};\nconst useStyles = makeStyles(theme => ({\n  root: {\n    background: `rgb(83 98 252) `,\n    backgroundSize: \"cover\",\n    borderRadius: theme.spacing(2)\n  },\n  textWhite: {\n    color: \"white\"\n  },\n  paperPlane: {\n    cursor: \"pointer\"\n  },\n  inputContainer: {\n    display: \"flex\",\n    justifyContent: \"center\"\n  },\n  loaderCommon: {\n    width: \"20px !important\",\n    height: \"20px !important\",\n    color: \"white\"\n  },\n  formControl: {\n    maxWidth: 400,\n    \"& .MuiOutlinedInput-root\": {\n      \"& fieldset\": {\n        borderColor: \"white\"\n      },\n      \"&:hover fieldset\": {\n        borderColor: \"white\"\n      },\n      \"&.Mui-focused fieldset\": {\n        borderColor: \"white\"\n      }\n    },\n    \"& .MuiInputBase-root\": {\n      color: \"white\"\n    },\n    \"& .MuiInputAdornment-root i\": {\n      color: \"white !important\"\n    }\n  }\n}));\n\nconst Newsletter = props => {\n  const {\n    className,\n    cmsData\n  } = props,\n        rest = _objectWithoutProperties(props, [\"className\", \"cmsData\"]);\n\n  const classes = useStyles();\n  const [formState, setFormState] = React.useState({\n    isValid: false,\n    values: {},\n    touched: {},\n    errors: {}\n  });\n  React.useEffect(() => {\n    const errors = validate(formState.values, schema);\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      isValid: errors ? false : true,\n      errors: errors || {}\n    }));\n  }, [formState.values]);\n\n  const handleChange = event => {\n    event.persist();\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      values: _objectSpread(_objectSpread({}, formState.values), {}, {\n        [event.target.name]: event.target.value\n      }),\n      touched: _objectSpread(_objectSpread({}, formState.touched), {}, {\n        [event.target.name]: true\n      })\n    }));\n  };\n\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (formState.isValid) {\n      const data = {\n        email: formState.values.email\n      };\n      setIsLoading(true);\n      const response = await new ApiHelper().FetchFromServer(ApiRoutes.NEWSLETTERSUBSCRIBE.service, ApiRoutes.NEWSLETTERSUBSCRIBE.url, ApiRoutes.NEWSLETTERSUBSCRIBE.method, ApiRoutes.NEWSLETTERSUBSCRIBE.authenticate, undefined, undefined, data);\n\n      if (response && !response.isError) {\n        Toast.fire({\n          icon: \"success\",\n          title: response.messages[0]\n        });\n        setIsLoading(false);\n      } else {\n        Toast.fire({\n          icon: \"error\",\n          title: response.messages[0]\n        });\n        setIsLoading(false);\n      }\n    }\n\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      touched: _objectSpread(_objectSpread({}, formState.touched), formState.errors)\n    }));\n  };\n\n  const hasError = field => formState.touched[field] && formState.errors[field] ? true : false; // For Get Template Data\n\n\n  const {\n    0: getTemplateData,\n    1: setGetTemplateData\n  } = useState(null);\n  useEffect(() => {\n    if (cmsData && cmsData.length) {\n      let getData = cmsData.filter(e => e.titleSlug === \"marketing\");\n      setGetTemplateData(...getData);\n    }\n  }, [cmsData]);\n  return __jsx(\"div\", _extends({\n    className: clsx(classes.root, className)\n  }, rest), __jsx(Section, null, __jsx(React.Fragment, null, __jsx(SectionHeader, {\n    title: __jsx(\"span\", {\n      className: classes.textWhite\n    }, getTemplateData ? getTemplateData.blockTitle12 : null),\n    subtitle: __jsx(\"span\", {\n      className: classes.textWhite\n    }, getTemplateData ? getTemplateData.blockTitle13 : null),\n    fadeUp: true\n  }), __jsx(\"form\", {\n    name: \"password-reset-form\",\n    method: \"post\",\n    onSubmit: handleSubmit\n  }, __jsx(\"div\", {\n    className: classes.inputContainer\n  }, __jsx(FormControl, {\n    fullWidth: true,\n    variant: \"outlined\",\n    \"data-aos\": \"fade-up\",\n    className: classes.formControl\n  }, __jsx(OutlinedInput, {\n    name: \"email\",\n    fullWidth: true,\n    helpertext: hasError(\"email\") ? formState.errors.email[0] : null,\n    error: hasError(\"email\"),\n    onChange: handleChange,\n    type: \"email\",\n    value: formState.values.email || \"\",\n    endAdornment: __jsx(InputAdornment, {\n      position: \"end\"\n    }, isLoading ? __jsx(CircularProgress, {\n      className: classes.loaderCommon\n    }) : __jsx(Icon, {\n      className: classes.paperPlane,\n      fontIconClass: \"fas fa-paper-plane\",\n      fontIconColor: indigo[900],\n      onClick: handleSubmit\n    })),\n    placeholder: \"Enter your email\"\n  })))))));\n};\n\nexport default Newsletter;","map":null,"metadata":{},"sourceType":"module"}