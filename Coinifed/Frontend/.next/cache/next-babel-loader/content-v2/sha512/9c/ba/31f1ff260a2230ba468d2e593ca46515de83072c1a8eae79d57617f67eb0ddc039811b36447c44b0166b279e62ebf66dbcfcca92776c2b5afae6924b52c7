{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport useTheme from '@material-ui/core/styles/useTheme';\nimport TextField from '@material-ui/core/TextField';\nimport Typography from '@material-ui/core/Typography';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Loader from 'components/common/Loader/loader';\nimport Toast from 'components/toaster';\nimport { ApiRoutes } from 'config';\nimport { ApiHelper } from 'helper';\nimport React, { useEffect, useState } from 'react';\nimport validate from 'validate.js';\nconst schema = {\n  firstName: {\n    presence: {\n      allowEmpty: false,\n      message: 'is required'\n    },\n    length: {\n      maximum: 120,\n      minimum: 3\n    }\n  },\n  lastName: {\n    presence: {\n      allowEmpty: false,\n      message: 'is required'\n    },\n    length: {\n      maximum: 120,\n      minimum: 3\n    }\n  },\n  email: {\n    presence: {\n      allowEmpty: false,\n      message: 'is required'\n    },\n    email: true,\n    length: {\n      maximum: 300\n    }\n  }\n};\nconst useStyles = makeStyles(theme => ({\n  inputTitle: {\n    fontWeight: 700,\n    marginBottom: theme.spacing(1)\n  },\n  commonBtn: {\n    display: \"inline-block\",\n    padding: \"7px 10px\",\n    backgroundColor: \"#5120FF\",\n    fontSize: 16,\n    minWidth: 200,\n    border: \"solid 1px #5120FF\",\n    textAlign: \"center\",\n    transition: \"all 0.3s ease-in-out\",\n    boxShadow: \"none\",\n    \"&:hover\": {\n      backgroundColor: \"#fff\",\n      color: \"#5120FF\",\n      boxShadow: \"none\"\n    }\n  }\n}));\n\nconst General = props => {\n  const {\n    className,\n    userDetails,\n    authToken\n  } = props,\n        rest = _objectWithoutProperties(props, [\"className\", \"userDetails\", \"authToken\"]);\n\n  const classes = useStyles();\n  const theme = useTheme();\n  const isMd = useMediaQuery(theme.breakpoints.up(\"md\"), {\n    defaultMatches: true\n  });\n  const [formState, setFormState] = React.useState({\n    isValid: false,\n    values: {},\n    touched: {},\n    errors: {}\n  });\n  useEffect(() => {\n    const errors = validate(formState.values, schema);\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      isValid: errors ? false : true,\n      errors: errors || {}\n    }));\n  }, [formState.values]);\n  useEffect(() => {\n    if (userDetails) {\n      setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n        values: {\n          firstName: userDetails.firstName,\n          lastName: userDetails.lastName,\n          email: userDetails.email,\n          role: userDetails.role,\n          corporate: userDetails.corporate,\n          university: userDetails.university\n        }\n      }));\n    }\n  }, []);\n\n  const handleChange = event => {\n    event.persist();\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      values: _objectSpread(_objectSpread({}, formState.values), {}, {\n        [event.target.name]: event.target.type === \"checkbox\" ? event.target.checked : event.target.value\n      }),\n      touched: _objectSpread(_objectSpread({}, formState.touched), {}, {\n        [event.target.name]: true\n      })\n    }));\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (formState.isValid) {\n      setLoader(true);\n      const data = {\n        firstName: formState.values.firstName,\n        lastName: formState.values.lastName,\n        email: formState.values.email,\n        password: formState.values.password\n      };\n      const response = await new ApiHelper().FetchFromServer(ApiRoutes.USERDETAILSUPDATE.service, ApiRoutes.USERDETAILSUPDATE.url, ApiRoutes.USERDETAILSUPDATE.method, ApiRoutes.USERDETAILSUPDATE.authenticate, authToken, undefined, data);\n\n      if (response && !response.isError) {\n        Toast.fire({\n          icon: \"success\",\n          title: response.data.message\n        });\n        setLoader(false);\n      } else {\n        Toast.fire({\n          icon: \"error\",\n          title: response.data.message\n        });\n        setLoader(false);\n      }\n    }\n  };\n\n  const {\n    0: loader,\n    1: setLoader\n  } = useState(false);\n\n  const hasError = field => formState.touched[field] && formState.errors[field] ? true : false;\n\n  return __jsx(React.Fragment, null, loader ? __jsx(Loader, null) : null, __jsx(\"div\", _extends({\n    className: className\n  }, rest), __jsx(Grid, {\n    container: true,\n    spacing: isMd ? 2 : 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Typography, {\n    variant: \"h6\",\n    color: \"textPrimary\"\n  }, \"Profile Settings\")), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Divider, null)), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"First Name\"), __jsx(TextField, {\n    placeholder: \"First name*\",\n    label: \"\",\n    variant: \"outlined\",\n    size: \"medium\",\n    fullWidth: true,\n    name: \"firstName\",\n    helpertext: hasError(\"firstName\") ? formState.errors.firstName[0] : null,\n    error: hasError(\"firstName\"),\n    onChange: handleChange,\n    type: \"firstName\",\n    value: formState.values.firstName || \"\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"Last Name\"), __jsx(TextField, {\n    placeholder: \"Last Name *\",\n    label: \"\",\n    variant: \"outlined\",\n    size: \"medium\",\n    fullWidth: true,\n    name: \"lastName\",\n    helpertext: hasError(\"lastName\") ? formState.errors.lastName[0] : null,\n    error: hasError(\"lastName\"),\n    onChange: handleChange,\n    type: \"lastName\",\n    value: formState.values.lastName || \"\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"E-mail\"), __jsx(TextField, {\n    placeholder: \"Email\",\n    label: \"\",\n    variant: \"outlined\",\n    size: \"medium\",\n    fullWidth: true,\n    disabled: true,\n    name: \"email\",\n    helpertext: hasError(\"email\") ? formState.errors.email[0] : null,\n    error: hasError(\"email\"),\n    onChange: handleChange,\n    type: \"email\",\n    value: formState.values.email || \"\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"Role\"), __jsx(TextField, {\n    placeholder: \"Last Name *\",\n    label: \"\",\n    variant: \"outlined\",\n    size: \"medium\",\n    fullWidth: true,\n    disabled: true,\n    name: \"lastName\",\n    helpertext: hasError(\"lastName\") ? formState.errors.lastName[0] : null,\n    error: hasError(\"lastName\"),\n    onChange: handleChange,\n    type: \"lastName\",\n    value: formState.values.role || \"\"\n  })), formState.values.corporate || formState.values.university ? __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, formState.values.corporate ? \"Corporation\" : \"University\"), __jsx(TextField, {\n    placeholder: \"Last Name *\",\n    label: \"\",\n    variant: \"outlined\",\n    size: \"medium\",\n    fullWidth: true,\n    name: \"corporate\",\n    disabled: true,\n    type: \"corporate\",\n    value: formState.values.corporate ? formState.values.corporate : formState.values.university || \"\"\n  })) : \"\", __jsx(Grid, {\n    item: true,\n    container: true,\n    justifyContent: \"flex-start\",\n    xs: 12\n  }, __jsx(Button, {\n    variant: \"contained\",\n    type: \"submit\",\n    color: \"primary\",\n    onClick: handleSubmit,\n    className: classes.commonBtn\n  }, \"Update\")))));\n};\n\nexport default General;","map":null,"metadata":{},"sourceType":"module"}