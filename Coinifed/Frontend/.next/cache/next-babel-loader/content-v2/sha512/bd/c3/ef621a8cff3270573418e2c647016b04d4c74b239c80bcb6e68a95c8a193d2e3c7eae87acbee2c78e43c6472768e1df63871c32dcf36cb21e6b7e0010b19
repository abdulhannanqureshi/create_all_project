{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport Grid from '@material-ui/core/Grid';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport useTheme from '@material-ui/core/styles/useTheme';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport { Image } from \"components/atoms\";\nimport { SectionHeader } from \"components/molecules\";\nimport React, { useEffect, useState } from \"react\";\nimport ReactHtmlParser from \"react-html-parser\";\nimport AppConfig from \"../../../../config/appConfig\";\nconst useStyles = makeStyles(theme => ({\n  image: {\n    maxWidth: 420\n  },\n  spCenter: {\n    [theme.breakpoints.down(\"sm\")]: {\n      textAlign: \"center\",\n      justifyContent: \"center\"\n    },\n    \"& h4\": {\n      textAlign: \"center\",\n      marginTop: 10\n    },\n    \"& p\": {\n      textAlign: \"center\",\n      fontSize: 18\n    }\n  }\n}));\n\nconst Story = props => {\n  const {\n    className,\n    cmsData\n  } = props,\n        rest = _objectWithoutProperties(props, [\"className\", \"cmsData\"]);\n\n  const classes = useStyles();\n  const theme = useTheme();\n  const isMd = useMediaQuery(theme.breakpoints.up(\"md\"), {\n    defaultMatches: true\n  }); // For Get Template Data\n\n  const {\n    0: getTemplateData,\n    1: setGetTemplateData\n  } = useState(null);\n  useEffect(() => {\n    if (cmsData && cmsData.length) {\n      let getData = cmsData.filter(e => e.titleSlug === \"aboutUs\");\n      setGetTemplateData(...getData);\n    }\n  }, [cmsData]);\n  return __jsx(\"div\", _extends({\n    className: className\n  }, rest), __jsx(Grid, {\n    container: true,\n    justifyContent: \"space-between\",\n    spacing: isMd ? 4 : 2,\n    direction: isMd ? \"row\" : \"column-reverse\"\n  }, __jsx(Grid, {\n    item: true,\n    container: true,\n    alignItems: \"center\",\n    justifyContent: \"flex-start\",\n    xs: 12,\n    md: 7,\n    \"data-aos\": \"fade-up\"\n  }, __jsx(\"div\", null, __jsx(SectionHeader, {\n    title: getTemplateData && getTemplateData.blockTitle1.length ? getTemplateData.blockTitle1 : \"Our story\",\n    subtitle: getTemplateData && getTemplateData.block1.length ? ReactHtmlParser(getTemplateData.block1) : null,\n    align: \"left\",\n    disableGutter: true,\n    subtitleProps: {\n      color: \"textPrimary\",\n      variant: \"body1\"\n    },\n    className: classes.spCenter\n  }))), getTemplateData && getTemplateData.blockImage1.length ? __jsx(Grid, {\n    item: true,\n    container: true,\n    justifyContent: isMd ? \"flex-end\" : \"flex-start\",\n    alignItems: \"center\",\n    xs: 12,\n    md: 5,\n    \"data-aos\": \"fade-up\",\n    className: classes.spCenter\n  }, __jsx(Image, {\n    src: `${AppConfig.IMAGE_URL}/${getTemplateData.blockImage1}`,\n    srcSet: `${AppConfig.IMAGE_URL}/${getTemplateData.blockImage1}`,\n    alt: \"Our story\",\n    className: classes.image\n  })) : null));\n};\n\nexport default Story;","map":null,"metadata":{},"sourceType":"module"}