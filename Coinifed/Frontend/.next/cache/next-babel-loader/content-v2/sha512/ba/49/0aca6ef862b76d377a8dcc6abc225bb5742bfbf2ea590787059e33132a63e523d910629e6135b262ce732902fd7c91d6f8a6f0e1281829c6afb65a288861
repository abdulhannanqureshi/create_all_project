{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport Swal from 'sweetalert2'; // import CreditCardInput from 'react-credit-card-input';\n\nimport { ApiHelper } from 'helper';\nimport { ApiRoutes } from 'config';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport useTheme from '@material-ui/core/styles/useTheme';\nimport Toast from 'components/toaster';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Box from '@material-ui/core/Box';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport blue from '@material-ui/core/colors/blue';\nimport { Section, SectionAlternate } from 'components/organisms';\nimport { HeroBackground } from 'components/organisms';\nimport router from 'next/router';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& .MuiTextField-root': {\n      backgroundColor: '#fff'\n    }\n  },\n  sectionDescription: {\n    background: blue[900]\n  },\n  sectionAlternateForm: {\n    background: 'transparent',\n    backgroundImage: `linear-gradient(180deg, ${theme.palette.background.paper} 300px, ${theme.palette.primary.dark} 0%)`\n  },\n  textWhite: {\n    color: '#fff'\n  },\n  error_msg: {\n    color: \"red\"\n  },\n  heroContainer: {\n    minWidth: \"1236px\"\n  },\n  contentSection: {\n    minHeight: \"500px\",\n    position: \"relative\",\n    '& p': {\n      fontSize: \"18px\",\n      lineHeight: \"28px\"\n    }\n  },\n  sectionHeader: {\n    paddingBottom: \"30px\",\n    borderBottom: \"1px solid #ddd\",\n    marginBottom: \"20px\"\n  },\n  creditInput: {\n    border: '5px solid #000'\n  },\n  listItem: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  modualWrap: {\n    borderBottom: \"1px solid #ddd\",\n    marginBottom: \"20px\"\n  },\n  modualAmount: {\n    width: \"100px\",\n    fontWeight: \"700\"\n  },\n  modualList: {\n    fontSize: \"18px\",\n    position: \"relative\",\n    paddingLeft: \"20px\",\n    paddingBottom: \"20px\",\n    fontWeight: \"300\",\n    color: \"#020202\",\n    '&::before': {\n      content: ' \"\" ',\n      display: \"block\",\n      width: \"10px\",\n      height: \"10px\",\n      position: \"absolute\",\n      backgroundColor: '#000',\n      top: '5px',\n      left: '0px',\n      borderRadius: \"50%\"\n    }\n  },\n  calculationBlock: {\n    paddingBottom: \"15px\"\n  },\n  calcTitle: {\n    paddingRight: \"20px\",\n    textAlign: \"right\",\n    width: \"calc(100% - 100px)\",\n    fontSize: '18px'\n  },\n  calcValue: {\n    width: \"100px\",\n    fontSize: '18px',\n    fontWeight: '800'\n  },\n  apply_btn: {\n    width: \"200px\"\n  },\n  paymentWrap: {\n    backgroundColor: \"#eeeeee85\",\n    border: \"1px solid #ddd\"\n  },\n  paymentLoader: {\n    position: 'absolute',\n    zIndex: '10',\n    top: '0',\n    left: '0',\n    width: '100%',\n    height: '100%',\n    background: '#fff',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column'\n  }\n}));\n\nconst OrderDetail = () => {\n  const classes = useStyles();\n  const {\n    0: loader,\n    1: setLoader\n  } = useState(false);\n  const {\n    0: couponLoader,\n    1: setCouponLoader\n  } = useState(false);\n  const {\n    0: paymentloader,\n    1: setPaymentLoader\n  } = useState(false);\n  const {\n    0: cardNumber,\n    1: setCardNumber\n  } = useState('');\n  const {\n    0: expiry,\n    1: setExpiry\n  } = useState('');\n  const {\n    0: cvc,\n    1: setCvc\n  } = useState('');\n  const {\n    0: courseData,\n    1: setCourseData\n  } = useState('');\n  const {\n    0: modualList,\n    1: setModualList\n  } = useState([]);\n  const {\n    0: modualFinal,\n    1: setModualFinal\n  } = useState([]);\n  const {\n    0: countTotal,\n    1: setCountTotal\n  } = useState(0);\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n  const {\n    0: coupanValue,\n    1: setCoupanValue\n  } = useState('');\n  const {\n    0: coupanCode,\n    1: setCoupanCode\n  } = useState('');\n  const [formState, setFormState] = React.useState({\n    values: {\n      firstName: '',\n      lastName: '',\n      email: '',\n      couponValue: '',\n      cardHolderName: ''\n    }\n  });\n  const {\n    0: fieldStyle,\n    1: setFieldStyle\n  } = useState({\n    border: '2px solid #ccc'\n  });\n  const {\n    0: inputStyle,\n    1: setInputStyle\n  } = useState({\n    fontSize: '16px'\n  });\n  const {\n    0: containerStyle,\n    1: setContainerStyle\n  } = useState({\n    width: '100%'\n  });\n  const theme = useTheme();\n  const isMd = useMediaQuery(theme.breakpoints.up('md'), {\n    defaultMatches: true\n  });\n  useEffect(() => {\n    const localData = localStorage.getItem('orderDetails');\n\n    if (localData) {\n      const courseId = JSON.parse(localData).courseId;\n\n      if (courseId) {\n        fetchUserData();\n        fetchData(courseId);\n      } else {\n        router.push('/courses');\n      }\n    } else {\n      router.push('/courses');\n    }\n  }, []);\n  useEffect(() => {\n    const localData = localStorage.getItem('orderDetails');\n    const modualData = JSON.parse(localData).modualData;\n\n    if (modualList.length > 0) {\n      const filteredList = modualList.filter(item => modualData.includes(item._id));\n      setModualFinal(filteredList);\n      const countTotal = filteredList.map(item => item.amount).reduce((prev, next) => parseInt(prev) + parseInt(next));\n      setCountTotal(countTotal);\n    }\n  }, [modualList]);\n\n  const handleCardNumberChange = event => {\n    setCardNumber(event.target.value);\n  };\n\n  const handleCardExpiryChange = event => {\n    setExpiry(event.target.value);\n  };\n\n  const handleCardCVCChange = event => {\n    setCvc(event.target.value);\n  };\n\n  const handleChange = event => {\n    event.persist();\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      values: _objectSpread(_objectSpread({}, formState.values), {}, {\n        [event.target.name]: event.target.value\n      })\n    }));\n    setError(\"\");\n  };\n\n  const fetchData = async id => {\n    setLoader(true);\n    const response = await new ApiHelper().FetchFromServer(ApiRoutes.COURSEDETAILS.service, ApiRoutes.COURSEDETAILS.url.replace(\":id\", id), ApiRoutes.COURSEDETAILS.method, ApiRoutes.COURSEDETAILS.authenticate, undefined, undefined, id);\n\n    if (response && !response.isError) {\n      const data = response.data.data.course;\n      const modualData = response.data.data.moduleDetails;\n      setCourseData(_objectSpread(_objectSpread({}, courseData), {}, {\n        data\n      }));\n      setModualList(modualData);\n      setLoader(false);\n    } else {\n      Toast.fire({\n        icon: 'error',\n        title: \"Something went wrong\"\n      });\n    }\n  };\n\n  const fetchUserData = async () => {\n    const response = await new ApiHelper().FetchFromServer(ApiRoutes.GETUSERDETAILS.service, ApiRoutes.GETUSERDETAILS.url, ApiRoutes.GETUSERDETAILS.method, ApiRoutes.GETUSERDETAILS.authenticate, undefined, undefined, undefined);\n\n    if (response && !response.isError) {\n      const data = response.data.data;\n      setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n        values: {\n          firstName: data.firstName,\n          lastName: data.lastName,\n          email: data.email\n        }\n      }));\n      setLoader(false);\n    } else {\n      Toast.fire({\n        icon: 'error',\n        title: \"Something went wrong\"\n      });\n      router.push('/signin');\n      localStorage.setItem('orderDetails', '');\n    }\n  };\n\n  const handleApplyCoupon = () => {\n    if (!formState.values.couponValue) {\n      setError(\"Please enter a valid Coupon code\");\n    } else {\n      setCouponLoader(true);\n      setCoupanValue(formState.values.couponValue);\n      applyCoupon({\n        'promoCode': formState.values.couponValue,\n        'moduleId': modualFinal\n      });\n    }\n  };\n\n  const applyCoupon = async data => {\n    const response = await new ApiHelper().FetchFromServer(ApiRoutes.APPLYCOUPON.service, ApiRoutes.APPLYCOUPON.url, ApiRoutes.APPLYCOUPON.method, ApiRoutes.APPLYCOUPON.authenticate, undefined, data);\n\n    if (response && !response.isError) {\n      const data = response.data.data;\n      setCoupanCode(data);\n      setCouponLoader(false);\n    } else {\n      Toast.fire({\n        icon: 'error',\n        title: response.messages[0]\n      });\n      setCouponLoader(false);\n    }\n  };\n\n  const handlePayment = () => {\n    if (cardNumber === '' || expiry === '' || cvc === '') {\n      Swal.fire('Please fill required details');\n      return;\n    } else {\n      const localData = localStorage.getItem('orderDetails');\n      const modualData = JSON.parse(localData).modualData;\n      const {\n        firstName,\n        lastName,\n        email,\n        cardHolderName\n      } = formState.values;\n      const card_exp_month = expiry.slice(0, 2);\n      const card_exp_year = expiry.substring(5, 7);\n      const data = {\n        email,\n        name: `${firstName}${lastName}`,\n        cardNumber: cardNumber.replace(/\\s/g, \"\"),\n        cardExpMonth: card_exp_month,\n        cardExpYear: card_exp_year,\n        cardCvc: cvc,\n        cardName: cardHolderName,\n        promoId: coupanCode.promoId,\n        moduleId: modualFinal\n      };\n      makePayment(data);\n    }\n  };\n\n  const makePayment = async data => {\n    setPaymentLoader(true);\n    const response = await new ApiHelper().FetchFromServer(ApiRoutes.MAKEPAYMENT.service, ApiRoutes.MAKEPAYMENT.url, ApiRoutes.MAKEPAYMENT.method, ApiRoutes.MAKEPAYMENT.authenticate, undefined, data);\n\n    if (response && !response.isError) {\n      const data = response.data.data;\n      Toast.fire({\n        icon: 'success',\n        title: \"Payment successfull\"\n      });\n      setPaymentLoader(false);\n      localStorage.setItem('orderDetails', '');\n      alertBox();\n    } else {\n      Toast.fire({\n        icon: 'error',\n        title: response.message\n      });\n    }\n  };\n\n  const alertBox = () => {\n    Swal.fire({\n      title: 'Your Order has been Successfully Placed',\n      showDenyButton: false,\n      showCancelButton: false,\n      confirmButtonColor: '#3085d6',\n      confirmButtonText: 'Go  To Dashboard'\n    }).then(result => {\n      if (result.isConfirmed) {\n        router.push('/dashboard');\n      }\n    });\n  };\n\n  return __jsx(\"div\", null, __jsx(HeroBackground, {\n    backgroundColor: \"#5120FF\"\n  }, __jsx(Section, {\n    className: classes.heroContainer\n  }, __jsx(Grid, {\n    container: true,\n    spacing: isMd ? 4 : 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12,\n    md: 12,\n    \"data-aos\": \"fade-up\"\n  }, __jsx(Typography, {\n    variant: isMd ? 'h3' : 'body1',\n    className: clsx(classes.textWhite, classes.fontWeight700)\n  }, \"Order Detail\"))))), __jsx(Section, {\n    className: classes.contentSection\n  }, paymentloader ? __jsx(\"div\", {\n    className: classes.paymentLoader\n  }, __jsx(Box, null, __jsx(CircularProgress, null)), __jsx(Box, {\n    pt: 2\n  }, __jsx(Typography, {\n    variant: \"h6\"\n  }, \"Please Wait....\")), __jsx(Box, null, __jsx(Typography, {\n    variant: \"h6\"\n  }, \"Don't refresh page or don't use back button while payment is in progress.\"))) : \"\", !loader ? __jsx(React.Fragment, null, __jsx(Grid, {\n    container: true,\n    spacing: isMd ? 2 : 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    md: 6\n  }, __jsx(Typography, {\n    variant: isMd ? 'h5' : 'body1',\n    className: clsx(classes.fontWeight700, classes.sectionHeader)\n  }, \"Review Your Order Details\"), __jsx(Typography, {\n    variant: isMd ? 'h5' : 'body1',\n    className: clsx(classes.fontWeight700)\n  }, courseData.data && courseData.data.title ? courseData.data.title : \"\"), __jsx(Box, {\n    pt: 5,\n    pb: 3,\n    className: classes.modualWrap\n  }, modualFinal.map((entity, index) => {\n    return __jsx(Box, {\n      key: index,\n      display: 'flex',\n      justifyContent: \"space-between\",\n      className: classes.modualList\n    }, __jsx(Box, {\n      className: classes.modualTitle\n    }, entity.moduleName), __jsx(Box, {\n      className: classes.modualAmount\n    }, entity.amount ? `$${entity.amount}` : null));\n  })), __jsx(Box, {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    className: classes.calculationBlock\n  }, __jsx(Box, {\n    className: classes.calcTitle\n  }, \"Discount Applied : \"), __jsx(Box, {\n    className: classes.calcValue\n  }, `${coupanCode ? `$${coupanCode.discountedAmount}` : '-'}`)), __jsx(Box, {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"space-between\",\n    className: classes.calculationBlock\n  }, __jsx(Box, {\n    className: classes.calcTitle\n  }, \"Total : \"), __jsx(Box, {\n    className: classes.calcValue\n  }, `$${coupanCode ? coupanCode.grandTotal : countTotal}`)), __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"center\",\n    p: 3\n  }, __jsx(TextField, {\n    placeholder: \"Coupon Code\",\n    label: \"Coupon Code\",\n    variant: \"outlined\",\n    size: \"medium\",\n    name: \"couponValue\",\n    fullWidth: true,\n    type: \"couponValue\",\n    onChange: handleChange,\n    value: coupanValue ? coupanValue : formState.values.couponValue || ''\n  }), couponLoader ? __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    className: classes.apply_btn\n  }, \"Processing....\") : __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: handleApplyCoupon,\n    className: classes.apply_btn\n  }, \"Apply Code\")), __jsx(Box, {\n    display: \"flex\",\n    pl: 3\n  }, __jsx(\"p\", {\n    className: classes.error_msg\n  }, error))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6,\n    md: 6\n  }, __jsx(Box, {\n    p: 2,\n    className: clsx(classes.paymentWrap, classes.root)\n  }, __jsx(Typography, {\n    variant: isMd ? 'h5' : 'body1',\n    className: clsx(classes.fontWeight700, classes.sectionHeader)\n  }, \"Payment Details\"), __jsx(Grid, {\n    container: true,\n    spacing: isMd ? 2 : 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"First Name\"), __jsx(TextField, {\n    placeholder: \"First name*\",\n    label: \"\",\n    variant: \"outlined\",\n    size: \"medium\",\n    fullWidth: true,\n    name: \"firstName\",\n    type: \"firstName\",\n    value: formState.values.firstName || ''\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 6\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"Last Name\"), __jsx(TextField, {\n    placeholder: \"Last Name *\",\n    label: \"\",\n    variant: \"outlined\",\n    size: \"medium\",\n    fullWidth: true,\n    name: \"lastName\",\n    type: \"lastName\",\n    value: formState.values.lastName || ''\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"E-mail\"), __jsx(TextField, {\n    placeholder: \"Email\",\n    label: \"\",\n    variant: \"outlined\",\n    size: \"medium\",\n    fullWidth: true,\n    name: \"email\",\n    type: \"email\",\n    value: formState.values.email || ''\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"Card Details*\")), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"Card Holder Name*\"), __jsx(TextField, {\n    placeholder: \"Card holder name*\",\n    label: \"\",\n    variant: \"outlined\",\n    size: \"medium\",\n    fullWidth: true,\n    name: \"cardHolderName\",\n    type: \"cardHolderName\",\n    onChange: handleChange,\n    value: formState.values.cardHolderName || ''\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: handlePayment,\n    size: \"large\"\n  }, \"Make Payment\"))))))) : \"\"));\n};\n\nexport default OrderDetail;","map":null,"metadata":{},"sourceType":"module"}