{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport { useRouter } from 'next/router';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport validate from 'validate.js';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { LearnMoreLink } from 'components/atoms';\nimport { ApiHelper } from \"../../../../helper\";\nimport { ApiRoutes } from \"../../../../config/ApiRoutes\";\nimport Toast from \"../../../../components/toaster\";\nimport Link from 'next/link';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: \"100%\"\n  },\n  commonBtn: {\n    padding: \"7px 10px\",\n    backgroundColor: \"#5120FF\",\n    fontSize: 16,\n    border: \"solid 1px #5120FF\",\n    textAlign: \"center\",\n    transition: \"all 0.3s ease-in-out\",\n    boxShadow: \"none\",\n    \"&:hover\": {\n      backgroundColor: \"#fff\",\n      color: \"#5120FF\",\n      boxShadow: \"none\"\n    }\n  },\n  cusTextPrimary: {\n    \"& .MuiTypography-colorPrimary\": {\n      color: \"#5120ff\"\n    }\n  }\n}));\nconst schema = {\n  password: {\n    presence: {\n      allowEmpty: false,\n      message: \"is required\"\n    },\n    length: {\n      minimum: 8\n    }\n  },\n  confirmPassword: {\n    presence: {\n      allowEmpty: false,\n      message: \"is required\"\n    },\n    length: {\n      minimum: 8\n    },\n    equality: \"password\"\n  }\n};\n\nconst Form = () => {\n  const classes = useStyles();\n  const {\n    0: userId,\n    1: setUserId\n  } = useState(\"\");\n  const [formState, setFormState] = React.useState({\n    isValid: false,\n    values: {},\n    touched: {},\n    errors: {}\n  });\n  const router = useRouter();\n  const {\n    id\n  } = router.query;\n  useEffect(() => {\n    if (id) {\n      setUserId(id);\n    }\n  }, [router.query]);\n  React.useEffect(() => {\n    const errors = validate(formState.values, schema);\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      isValid: errors ? false : true,\n      errors: errors || {}\n    }));\n  }, [formState.values]);\n\n  const handleChange = event => {\n    event.persist();\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      values: _objectSpread(_objectSpread({}, formState.values), {}, {\n        [event.target.name]: event.target.type === \"checkbox\" ? event.target.checked : event.target.value\n      }),\n      touched: _objectSpread(_objectSpread({}, formState.touched), {}, {\n        [event.target.name]: true\n      })\n    }));\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (formState.isValid) {\n      const data = {\n        password: formState.values.password,\n        verifyToken: userId\n      };\n\n      if (formState.isValid) {\n        const response = await new ApiHelper().FetchFromServer(ApiRoutes.RESETPASSWORD.service, ApiRoutes.RESETPASSWORD.url, ApiRoutes.RESETPASSWORD.method, ApiRoutes.RESETPASSWORD.authenticate, undefined, undefined, data);\n\n        if (response && !response.isError) {\n          Toast.fire({\n            icon: \"success\",\n            title: response.data.message\n          });\n          router.push(\"/signin\");\n        } else {\n          Toast.fire({\n            icon: \"error\",\n            title: \"Something went wrong\"\n          });\n        }\n      }\n    }\n\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      touched: _objectSpread(_objectSpread({}, formState.touched), formState.errors)\n    }));\n  };\n\n  const hasError = field => formState.touched[field] && formState.errors[field] ? true : false;\n\n  return __jsx(\"div\", {\n    className: classes.root\n  }, __jsx(\"form\", {\n    name: \"password-reset-form\",\n    method: \"post\",\n    onSubmit: handleSubmit\n  }, __jsx(Grid, {\n    container: true,\n    spacing: 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(TextField, {\n    placeholder: \"Password\",\n    label: \"Password *\",\n    variant: \"outlined\",\n    size: \"medium\",\n    name: \"password\",\n    fullWidth: true,\n    helpertext: hasError(\"password\") ? formState.errors.password[0] : null,\n    error: hasError(\"password\"),\n    onChange: handleChange,\n    type: \"password\",\n    value: formState.values.password || \"\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(TextField, {\n    placeholder: \"Confirm Password\",\n    label: \"Confirm Password *\",\n    variant: \"outlined\",\n    size: \"medium\",\n    name: \"confirmPassword\",\n    fullWidth: true,\n    helpertext: hasError(\"confirmPassword\") ? formState.errors.confirmPassword[0] : null,\n    error: hasError(\"confirmPassword\"),\n    onChange: handleChange,\n    type: \"password\",\n    value: formState.values.confirmPassword || \"\"\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(\"i\", null, __jsx(Typography, {\n    variant: \"subtitle2\"\n  }, \"Fields that are marked with an asterisk (*) sign are required.\"))), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Button, {\n    size: \"large\",\n    variant: \"contained\",\n    type: \"submit\",\n    color: \"primary\",\n    fullWidth: true,\n    className: classes.commonBtn\n  }, \"Reset Password\")), __jsx(Grid, {\n    item: true,\n    xs: 12\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    align: \"center\",\n    className: classes.cusTextPrimary\n  }, \"Remember your password?\", \" \", __jsx(Link, {\n    href: \"/signin\"\n  }, __jsx(LearnMoreLink, {\n    title: \"Sign in here\"\n  })))))));\n};\n\nexport default Form;","map":null,"metadata":{},"sourceType":"module"}