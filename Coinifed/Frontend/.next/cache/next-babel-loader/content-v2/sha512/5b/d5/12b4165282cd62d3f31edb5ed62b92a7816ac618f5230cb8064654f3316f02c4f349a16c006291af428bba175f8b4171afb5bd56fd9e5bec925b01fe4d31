{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport { ApiHelper } from \"../../../../helper\";\nimport { ApiRoutes } from \"../../../../config/ApiRoutes\";\nimport validate from 'validate.js';\nimport Toast from 'components/toaster';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Grid from '@material-ui/core/Grid';\nimport { SectionHeader } from 'components/molecules';\nimport { CardBase } from 'components/organisms';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport clsx from \"clsx\";\nimport { CircularProgress } from '@material-ui/core';\nconst schema = {\n  email: {\n    presence: {\n      allowEmpty: false,\n      message: \"is required\"\n    },\n    email: true,\n    length: {\n      maximum: 120\n    }\n  }\n};\nconst useStyles = makeStyles(theme => ({\n  commonBtn: {\n    display: \"inline-block\",\n    padding: \"7px 10px\",\n    backgroundColor: \"#5120FF\",\n    fontSize: 16,\n    minWidth: 200,\n    border: \"solid 1px #5120FF\",\n    textAlign: \"center\",\n    transition: \"all 0.3s ease-in-out\",\n    boxShadow: \"none\",\n    \"&:hover\": {\n      backgroundColor: \"#fff\",\n      color: \"#5120FF\",\n      boxShadow: \"none\",\n      \"& $loaderCommon\": {\n        color: \"#5120FF !important\"\n      }\n    },\n    \"&:disabled\": {\n      backgroundColor: \"#5362fc !important\"\n    }\n  },\n  boxShadowHighlight: {\n    boxShadow: \"rgba(0, 0, 0, 0.25) 0px 0.0625em 0.0625em, rgba(0, 0, 0, 0.25) 0px 0.125em 0.5em, rgba(255, 255, 255, 0.1) 0px 0px 0px 1px inset\"\n  },\n  smallCommonBtn: {\n    minWidth: 132,\n    padding: \"8px 10px\",\n    fontSize: 15\n  },\n  customField: {\n    \"& input\": {\n      padding: \"15px\",\n      height: 44,\n      boxSizing: \" border-box\"\n    }\n  },\n  loaderCommon: {\n    width: \"17px !important\",\n    height: \"17px !important\",\n    color: \"white\"\n  }\n}));\n\nconst Subscription = props => {\n  const classes = useStyles();\n\n  const {\n    className\n  } = props,\n        rest = _objectWithoutProperties(props, [\"className\"]);\n\n  const [formState, setFormState] = React.useState({\n    isValid: false,\n    values: {},\n    touched: {},\n    errors: {}\n  });\n  useEffect(() => {\n    const errors = validate(formState.values, schema);\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      isValid: errors ? false : true,\n      errors: errors || {}\n    }));\n  }, [formState.values]);\n  useEffect(() => {}, [props]);\n\n  const handleChange = event => {\n    event.persist();\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      values: _objectSpread(_objectSpread({}, formState.values), {}, {\n        [event.target.name]: event.target.value\n      }),\n      touched: _objectSpread(_objectSpread({}, formState.touched), {}, {\n        [event.target.name]: true\n      })\n    }));\n  };\n\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (formState.isValid) {\n      const data = {\n        email: formState.values.email\n      };\n      setIsLoading(true);\n      const response = await new ApiHelper().FetchFromServer(ApiRoutes.NEWSLETTERSUBSCRIBE.service, ApiRoutes.NEWSLETTERSUBSCRIBE.url, ApiRoutes.NEWSLETTERSUBSCRIBE.method, ApiRoutes.NEWSLETTERSUBSCRIBE.authenticate, undefined, undefined, data);\n\n      if (response && !response.isError) {\n        Toast.fire({\n          icon: \"success\",\n          title: response.messages[0]\n        });\n        setIsLoading(false);\n      } else {\n        Toast.fire({\n          icon: \"error\",\n          title: response.messages[0]\n        });\n        setIsLoading(false);\n      }\n    }\n\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      touched: _objectSpread(_objectSpread({}, formState.touched), formState.errors)\n    }));\n  };\n\n  const hasError = field => formState.touched[field] && formState.errors[field] ? true : false;\n\n  return __jsx(\"div\", _extends({\n    className: className\n  }, rest), __jsx(CardBase, {\n    withShadow: true,\n    \"data-aos\": \"fade-up\",\n    className: classes.boxShadowHighlight\n  }, __jsx(SectionHeader, {\n    title: props.sending ? props.sending.blockTitle12 : null,\n    subtitle: props.sending ? props.sending.blockTitle13 : null,\n    fadeUp: true\n  }), __jsx(Grid, {\n    container: true,\n    spacing: 1,\n    alignItems: \"center\"\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 9\n  }, __jsx(TextField, {\n    placeholder: \"Your e-mail address\",\n    variant: \"outlined\",\n    size: \"medium\",\n    name: \"email\",\n    fullWidth: true,\n    type: \"email\",\n    helpertext: hasError(\"email\") ? formState.errors.email[0] : null,\n    error: hasError(\"email\"),\n    onChange: handleChange,\n    value: formState.values.email || \"\",\n    className: classes.customField\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 3\n  }, __jsx(Button, {\n    fullWidth: true,\n    variant: \"contained\",\n    color: \"primary\",\n    onClick: handleSubmit,\n    disabled: isLoading,\n    className: clsx(classes.commonBtn, classes.smallCommonBtn)\n  }, isLoading ? __jsx(CircularProgress, {\n    className: classes.loaderCommon\n  }) : \"subscribe\")))));\n};\n\nexport default Subscription;","map":null,"metadata":{},"sourceType":"module"}