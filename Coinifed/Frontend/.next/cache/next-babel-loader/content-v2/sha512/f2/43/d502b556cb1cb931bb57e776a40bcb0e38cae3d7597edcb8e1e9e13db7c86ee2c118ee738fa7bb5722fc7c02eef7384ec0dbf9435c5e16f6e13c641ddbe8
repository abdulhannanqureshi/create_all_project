{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport { ApiHelper } from \"../../../../helper\";\nimport { ApiRoutes } from \"../../../../config/ApiRoutes\";\nimport validate from 'validate.js';\nimport Toast from 'components/toaster';\nimport { Image } from 'components/atoms';\nimport { SectionHeader } from 'components/molecules';\nimport Button from '@material-ui/core/Button';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport Box from '@material-ui/core/Box';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport useTheme from '@material-ui/core/styles/useTheme';\nimport CheckIcon from '@material-ui/icons/Check';\nconst schema = {\n  email: {\n    presence: {\n      allowEmpty: false,\n      message: 'is required'\n    },\n    email: true,\n    length: {\n      maximum: 120\n    }\n  }\n};\nconst useStyles = makeStyles(theme => ({\n  root: {\n    padding: theme.spacing(3, 2),\n    borderRadius: theme.spacing(2),\n    background: theme.palette.alternate.dark,\n    [theme.breakpoints.up(\"md\")]: {\n      padding: theme.spacing(3)\n    }\n  },\n  cover: {\n    width: 200,\n    height: 200,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    margin: \"0 auto\",\n    marginBottom: theme.spacing(3)\n  },\n  form: {\n    \"& .MuiTextField-root\": {\n      background: theme.palette.background.paper\n    },\n    \"& .MuiOutlinedInput-input\": {\n      background: theme.palette.background.paper\n    }\n  },\n  inputTitle: {\n    fontWeight: 700,\n    marginBottom: theme.spacing(1)\n  },\n  successBox: {\n    padding: \"20px\",\n    flexFlow: \"column\",\n    background: \"#fff\",\n    borderRadius: \"8px\",\n    margin: \"0 auto\"\n  },\n  successIcon: {\n    display: \"flex\",\n    width: \"75px\",\n    height: \"75px\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginBottom: \"14px\",\n    border: \"2px solid #fab935\",\n    borderRadius: \"50%\"\n  },\n  checkIcon: {\n    width: \"60px\",\n    height: \"60px\"\n  },\n  commonBtn: {\n    display: \"inline-block\",\n    padding: \"7px 10px\",\n    backgroundColor: \"#5120FF\",\n    fontSize: 16,\n    minWidth: 200,\n    border: \"solid 1px #5120FF\",\n    textAlign: \"center\",\n    transition: \"all 0.3s ease-in-out\",\n    boxShadow: \"none\",\n    \"&:hover\": {\n      backgroundColor: \"#fff\",\n      color: \"#5120FF\",\n      boxShadow: \"none\"\n    }\n  },\n  smallCommonBtn: {\n    minWidth: 132,\n    padding: \"8px 10px\",\n    fontSize: 15\n  }\n}));\n\nconst Form = props => {\n  const {\n    className,\n    cmsData\n  } = props,\n        rest = _objectWithoutProperties(props, [\"className\", \"cmsData\"]);\n\n  const classes = useStyles();\n  const {\n    0: subscribeSuccess,\n    1: setSubscribeSuccess\n  } = useState(false);\n  const [formState, setFormState] = React.useState({\n    isValid: false,\n    values: {},\n    touched: {},\n    errors: {}\n  });\n  const theme = useTheme();\n  const isMd = useMediaQuery(theme.breakpoints.up(\"md\"), {\n    defaultMatches: true\n  });\n  useEffect(() => {\n    const errors = validate(formState.values, schema);\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      isValid: errors ? false : true,\n      errors: errors || {}\n    }));\n  }, [formState.values]);\n\n  const handleChange = event => {\n    event.persist();\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      values: _objectSpread(_objectSpread({}, formState.values), {}, {\n        [event.target.name]: event.target.value\n      }),\n      touched: _objectSpread(_objectSpread({}, formState.touched), {}, {\n        [event.target.name]: true\n      })\n    }));\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    if (formState.isValid) {\n      const data = {\n        email: formState.values.email\n      };\n      const response = await new ApiHelper().FetchFromServer(ApiRoutes.NEWSLETTERSUBSCRIBE.service, ApiRoutes.NEWSLETTERSUBSCRIBE.url, ApiRoutes.NEWSLETTERSUBSCRIBE.method, ApiRoutes.NEWSLETTERSUBSCRIBE.authenticate, undefined, data);\n\n      if (response && !response.isError) {\n        Toast.fire({\n          icon: \"success\",\n          title: response.messages[0]\n        });\n        setSubscribeSuccess(true);\n      } else {\n        Toast.fire({\n          icon: \"error\",\n          title: response.messages[0]\n        });\n      }\n    }\n\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      touched: _objectSpread(_objectSpread({}, formState.touched), formState.errors)\n    }));\n  };\n\n  const hasError = field => formState.touched[field] && formState.errors[field] ? true : false; // For Get Template Data\n\n\n  const {\n    0: getTemplateData,\n    1: setGetTemplateData\n  } = useState(null);\n  useEffect(() => {\n    if (cmsData && cmsData.length) {\n      let getData = cmsData.filter(e => e.titleSlug === \"marketing\");\n      setGetTemplateData(...getData);\n    }\n  }, [cmsData]);\n  return __jsx(\"div\", _extends({\n    className: clsx(classes.root, className)\n  }, rest), __jsx(\"div\", {\n    className: classes.cover\n  }, __jsx(Image, {\n    src: \"https://assets.maccarianagency.com/the-front/illustrations/want-to-work.svg\"\n  })), __jsx(SectionHeader, {\n    title: getTemplateData ? getTemplateData.blockTitle12 : null,\n    subtitle: getTemplateData ? getTemplateData.blockTitle13 : null,\n    titleProps: {\n      variant: \"h4\",\n      color: \"textPrimary\"\n    },\n    subtitleProps: {\n      variant: \"body1\",\n      color: \"textPrimary\"\n    },\n    \"data-aos\": \"fade-up\",\n    align: \"left\"\n  }), __jsx(\"div\", {\n    className: classes.form\n  }, __jsx(Grid, {\n    container: true,\n    spacing: isMd ? 4 : 2\n  }, !subscribeSuccess ? __jsx(React.Fragment, null, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    \"data-aos\": \"fade-up\"\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"E-mail\"), __jsx(TextField, {\n    placeholder: \"Your e-mail address\",\n    variant: \"outlined\",\n    size: \"medium\",\n    name: \"email\",\n    fullWidth: true,\n    type: \"email\",\n    helpertext: hasError(\"email\") ? formState.errors.email[0] : null,\n    error: hasError(\"email\"),\n    onChange: handleChange,\n    value: formState.values.email || \"\"\n  })), __jsx(Grid, {\n    item: true,\n    container: true,\n    justifyContent: \"center\",\n    xs: 12\n  }, __jsx(Button, {\n    variant: \"contained\",\n    type: \"submit\",\n    color: \"primary\",\n    onClick: handleSubmit,\n    className: clsx(classes.commonBtn, classes.smallCommonBtn)\n  }, \"Subscribe\"))) : __jsx(Box, {\n    className: classes.successBox,\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }, __jsx(Typography, {\n    variant: \"span\",\n    className: classes.successIcon\n  }, __jsx(CheckIcon, {\n    color: \"secondary\",\n    width: \"50\",\n    className: classes.checkIcon\n  })), __jsx(Typography, {\n    variant: isMd ? \"h5\" : \"body1\",\n    className: classes.inputTitle\n  }, \"Thank You For Subscribe\")))));\n};\n\nexport default Form;","map":null,"metadata":{},"sourceType":"module"}