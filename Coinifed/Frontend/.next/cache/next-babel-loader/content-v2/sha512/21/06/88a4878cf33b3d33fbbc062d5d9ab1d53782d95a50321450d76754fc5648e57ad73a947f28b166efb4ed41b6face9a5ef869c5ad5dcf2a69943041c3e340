{"ast":null,"code":"var __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport Swal from 'sweetalert2';\nimport InputMask from 'react-input-mask';\nimport { ApiHelper } from 'helper';\nimport { ApiRoutes } from 'config';\nimport validate from 'validate.js';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport useTheme from '@material-ui/core/styles/useTheme';\nimport Button from '@material-ui/core/Button';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport blue from '@material-ui/core/colors/blue';\nimport TextField from '@material-ui/core/TextField';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Box from '@material-ui/core/Box';\nimport Toast from 'components/toaster';\nimport { useRouter } from 'next/router';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& .MuiTextField-root': {\n      backgroundColor: '#fff'\n    }\n  },\n  paddingExtra: {\n    padding: \"20px 60px 20px 60px\",\n    boxShadow: \" rgba(100, 100, 111, 0.2) 0px 7px 29px 0px\"\n  },\n  sectionDescription: {\n    background: blue[900]\n  },\n  sectionAlternateForm: {\n    background: 'transparent',\n    backgroundImage: `linear-gradient(180deg, ${theme.palette.background.paper} 300px, ${theme.palette.primary.dark} 0%)`\n  },\n  textWhite: {\n    color: '#fff'\n  },\n  error_msg: {\n    color: \"red\"\n  },\n  success_msg: {\n    color: \"green\"\n  },\n  heroContainer: {\n    minWidth: \"1236px\"\n  },\n  contentSection: {\n    minHeight: \"500px\",\n    position: \"relative\",\n    '& p': {\n      fontSize: \"18px\",\n      lineHeight: \"28px\"\n    }\n  },\n  sectionHeader: {\n    paddingBottom: \"30px\",\n    borderBottom: \"1px solid #ddd\",\n    marginBottom: \"20px\"\n  },\n  fullHeight: {\n    height: \"100%\"\n  },\n  listItem: {\n    display: 'flex',\n    justifyContent: 'space-between'\n  },\n  modualWrap: {\n    borderBottom: \"1px solid #ddd\",\n    marginBottom: \"20px\"\n  },\n  modualAmount: {\n    width: \"100px\",\n    fontWeight: \"700\"\n  },\n  cardPayment: {\n    marginTop: \"30px\",\n    boxShadow: \"rgba(99, 99, 99, 0.2) 0px 2px 8px 0px;\"\n  },\n  card1: {\n    marginTop: \"30px\"\n  },\n  modualList: {\n    fontSize: \"18px\",\n    position: \"relative\",\n    paddingLeft: \"20px\",\n    paddingBottom: \"20px\",\n    fontWeight: \"300\",\n    color: \"#020202\",\n    '&::before': {\n      content: ' \"\" ',\n      display: \"block\",\n      width: \"10px\",\n      height: \"10px\",\n      position: \"absolute\",\n      backgroundColor: '#000',\n      top: '5px',\n      left: '0px',\n      borderRadius: \"50%\"\n    }\n  },\n  calculationBlock: {\n    paddingBottom: \"15px\"\n  },\n  calcTitle: {\n    paddingRight: \"20px\",\n    textAlign: \"right\",\n    width: \"calc(100% - 100px)\",\n    fontSize: '18px'\n  },\n  calcValue: {\n    width: \"100px\",\n    fontSize: '18px',\n    fontWeight: '800'\n  },\n  apply_btn: {\n    width: \"200px\"\n  },\n  paymentWrap: {\n    backgroundColor: \"#eeeeee85\",\n    border: \"1px solid #ddd\"\n  },\n  paymentLoader: {\n    position: 'absolute',\n    zIndex: '10',\n    top: '0',\n    left: '0',\n    width: '100%',\n    height: '100%',\n    background: '#fff',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column'\n  },\n  formError: {\n    color: \"red\",\n    fontSize: \"18px\"\n  },\n  cardInput: {\n    border: \"1px solid rgba(0, 0, 0, 0.23)\",\n    padding: \"18.5px 14px\",\n    height: \"1.1876em\",\n    margin: \"0\",\n    display: \"block\",\n    minWidth: \"0\",\n    background: \"none\",\n    // boxSizing: \"content-box\",\n    letterSpacing: \"inherit\",\n    animationDuration: \"10ms\",\n    borderRadius: \"4px\",\n    backgroundColor: \"#fff\",\n    height: \"61px\",\n    fontSize: \"1rem\",\n    width: \"100%\"\n  },\n  paymentButton: {\n    background: 'linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)',\n    padding: '10px 30px',\n    color: '#fff',\n    fontWeight: '900',\n    fontSize: '16px',\n    width: \"100%\"\n  },\n  fontWeight700: {\n    fontWeight: \"700\"\n  },\n  displayFlex: {\n    display: \"flex\",\n    justifyContent: \"space-between\"\n  },\n  errorRed: {\n    color: \"red\"\n  },\n  commonBtn: {\n    display: \"inline-block\",\n    padding: \"6px 22px\",\n    backgroundColor: \"#5120FF\",\n    color: \"#fff\",\n    fontSize: 16,\n    borderRadius: 5,\n    minWidth: 142,\n    border: \"solid 1px #5120FF\",\n    textAlign: \"center\",\n    transition: \"all 0.3s ease-in-out\",\n    \"&:hover\": {\n      backgroundColor: \"#fff\",\n      color: \"#5120FF\",\n      boxShadow: \"none\"\n    }\n  },\n  paymentLoader: {\n    position: 'absolute',\n    zIndex: '10',\n    top: '0',\n    left: '0',\n    width: '100%',\n    height: '100%',\n    background: '#fff',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    flexDirection: 'column'\n  },\n  paddingx: {\n    padding: \"0 0 0 12px\"\n  },\n  loader: {\n    display: \"flex\",\n    minHeight: \"500px\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  fontSm: {\n    fontSize: \"20px\"\n  },\n  fontDynamic: {\n    fontSize: \"18px\"\n  },\n  marginTopHeading: {\n    marginTop: \"40px\"\n  },\n  marginTopsm: {\n    marginTop: \"61px\",\n    fontSize: \"16px\"\n  }\n}));\nconst schema = {\n  cardHolderName: {\n    presence: {\n      allowEmpty: false,\n      message: 'is required'\n    },\n    length: {\n      maximum: 120\n    }\n  },\n  cardNumber: {\n    presence: {\n      allowEmpty: false,\n      message: 'is required'\n    },\n    length: {\n      minimum: 19,\n      maximum: 19\n    }\n  },\n  expiry: {\n    presence: {\n      allowEmpty: false,\n      message: 'is required'\n    }\n  },\n  cvc: {\n    presence: {\n      allowEmpty: false,\n      message: 'is required'\n    },\n    length: {\n      minimum: 3,\n      maximum: 3\n    }\n  }\n};\n\nconst CertificatePayment = props => {\n  const classes = useStyles();\n  const {\n    modualData,\n    selectedId,\n    courseId,\n    courseTitle,\n    promoCode\n  } = props;\n  const {\n    0: loader,\n    1: setLoader\n  } = useState(false);\n  const {\n    0: couponLoader,\n    1: setCouponLoader\n  } = useState(false);\n  const {\n    0: paymentStatusLoader,\n    1: setPaymentStatusLoader\n  } = useState(true);\n  const {\n    0: paymentloader,\n    1: setPaymentLoader\n  } = useState(false);\n  const {\n    0: modualFinal,\n    1: setModualFinal\n  } = useState([]);\n  const {\n    0: countTotal,\n    1: setCountTotal\n  } = useState(0);\n  const {\n    0: countDiscountTotal,\n    1: setCountDiscountTotal\n  } = useState(0);\n  const {\n    0: countDiscountValue,\n    1: setCountDiscountValue\n  } = useState(0); // As per condition 4 module 1000 and 8 module 2000\n\n  const {\n    0: isCompleteCourse,\n    1: setIsCompleteCourse\n  } = useState(false);\n  const {\n    0: error,\n    1: setError\n  } = useState('');\n  const {\n    0: formError,\n    1: setFormError\n  } = useState('');\n  const {\n    0: successMsg,\n    1: setSuccessMsg\n  } = useState('');\n  const {\n    0: errorState,\n    1: setErrorState\n  } = useState('');\n  const {\n    0: coupanValue,\n    1: setCoupanValue\n  } = useState('');\n  const {\n    0: coupanCode,\n    1: setCoupanCode\n  } = useState('');\n  const [formState, setFormState] = React.useState({\n    isValid: false,\n    values: {},\n    touched: {},\n    errors: {}\n  });\n  const [fetchResponseData, setfetchResponseData] = React.useState({\n    certificateAmount: \"\",\n    courseTitle: \"\",\n    courseTitle: \"\",\n    firstName: \"\",\n    lastName: \"\",\n    linkExpireDate: \"\",\n    email: \"email\"\n  });\n  const theme = useTheme();\n  const isMd = useMediaQuery(theme.breakpoints.up('md'), {\n    defaultMatches: true\n  });\n  const router = useRouter();\n  const id = router.query;\n  const {\n    0: CourseId,\n    1: setCourseId\n  } = useState(\"\");\n  const {\n    0: responseStatus,\n    1: setResponseStatus\n  } = useState(false);\n  const {\n    0: isLoading,\n    1: setIsloading\n  } = useState(true);\n  useEffect(() => {\n    if (id.id) {\n      setCourseId(id.id);\n      fetchUserData(id.id);\n    }\n  }, [router.query]);\n  useEffect(() => {\n    const errors = validate(formState.values, schema);\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      isValid: errors ? false : true,\n      errors: errors || {}\n    }));\n  }, [formState.values]);\n\n  const handleChange = event => {\n    event.persist();\n    setFormState(formState => _objectSpread(_objectSpread({}, formState), {}, {\n      values: _objectSpread(_objectSpread({}, formState.values), {}, {\n        [event.target.name]: event.target.value\n      }),\n      touched: _objectSpread(_objectSpread({}, formState.touched), {}, {\n        [event.target.name]: true\n      })\n    }));\n    setFormError('');\n  };\n\n  function createData(name, content) {\n    return {\n      name,\n      content\n    };\n  }\n\n  const rows = [createData('First name', fetchResponseData.firstName), createData('Last name', fetchResponseData.lastName), createData('Email', fetchResponseData.email), createData('Course title', fetchResponseData.courseTitle), createData('Certificate Amount', `${fetchResponseData.certificateAmount} USD`)];\n\n  const fetchUserData = async id => {\n    const response = await new ApiHelper().FetchFromServer(ApiRoutes.GETPAYMENTCERTIFICATEDETAILS.service, ApiRoutes.GETPAYMENTCERTIFICATEDETAILS.url.replace(\":id\", id), ApiRoutes.GETPAYMENTCERTIFICATEDETAILS.method, ApiRoutes.GETPAYMENTCERTIFICATEDETAILS.authenticate, undefined, undefined);\n\n    if (response && !response.isError) {\n      setfetchResponseData(name => _objectSpread(_objectSpread({}, name), {}, {\n        certificateAmount: response.data.data.certificateAmount,\n        courseTitle: response.data.data.courseTitle,\n        courseTitle: response.data.data.courseTitle,\n        firstName: response.data.data.firstName,\n        lastName: response.data.data.lastName,\n        linkExpireDate: response.data.data.linkExpireDate,\n        email: response.data.data.email\n      }));\n      setLoader(false);\n      setIsloading(false);\n      setResponseStatus(true);\n    } else {\n      Toast.fire({\n        icon: 'error',\n        title: response.messages\n      });\n      localStorage.setItem('orderDetails', '');\n      setIsloading(false);\n      setResponseStatus(false);\n      setErrorState(response.messages); // router.push('/dashboard?pid=billing')\n    }\n  };\n\n  const handlePayment = () => {\n    if (formState.isValid) {\n      const {\n        firstName,\n        lastName,\n        email,\n        cardHolderName,\n        cardNumber,\n        cvc,\n        expiry\n      } = formState.values;\n      const getCurrentYear = new Date().getFullYear();\n      const currentYear = getCurrentYear.toString().substring(2);\n      const card_exp_month = expiry.substring(0, 2);\n      const card_exp_year = expiry.substring(3);\n\n      if (card_exp_month > 12) {\n        setFormError(\"Please enter a valid month\");\n        return;\n      }\n\n      if (card_exp_year < currentYear) {\n        setFormError(\"Card expiry can not be set to less than current year\");\n        return;\n      }\n\n      const data = {\n        cardNumber: cardNumber.replace(/\\s/g, \"\"),\n        cardExpMonth: card_exp_month,\n        cardExpYear: card_exp_year,\n        cardCvc: cvc,\n        cardName: cardHolderName,\n        certificateAmount: fetchResponseData.certificateAmount,\n        courseTitle: fetchResponseData.courseTitle\n      };\n      makePayment(data);\n    } else {\n      setFormError(\"Please fill all required details\");\n    }\n  };\n\n  const makePayment = async data => {\n    setPaymentLoader(true);\n    const response = await new ApiHelper().FetchFromServer(ApiRoutes.MAKEPAYMENTCERTIFICATE.service, ApiRoutes.MAKEPAYMENTCERTIFICATE.url.replace(\":id\", CourseId), ApiRoutes.MAKEPAYMENTCERTIFICATE.method, ApiRoutes.MAKEPAYMENTCERTIFICATE.authenticate, undefined, data);\n\n    if (response && !response.isError) {\n      const data = response.data.data;\n      Toast.fire({\n        icon: 'success',\n        title: \"Payment successful\"\n      });\n      setPaymentLoader(false);\n      alertBox('Your Payment for certificate has been processed successfully.');\n    } else {\n      Toast.fire({\n        icon: 'error',\n        title: response.message\n      });\n      setFormError(response.messages[0]);\n      setPaymentLoader(false);\n    }\n  };\n\n  const convertedDate = date => {\n    return new Date(date).toLocaleString();\n  };\n\n  const alertBox = text => {\n    Swal.fire({\n      text: text,\n      padding: '2em',\n      showDenyButton: false,\n      showCancelButton: false,\n      confirmButtonColor: '#3085d6',\n      confirmButtonText: 'Go  To Dashboard'\n    }).then(result => {\n      if (result.isConfirmed) {\n        router.push('/dashboard?pid=billing');\n      }\n    });\n  };\n\n  const hasError = field => formState.touched[field] && formState.errors[field] ? true : false;\n\n  return __jsx(React.Fragment, null, isLoading ? __jsx(\"div\", {\n    className: classes.paymentLoader\n  }, __jsx(Box, null, __jsx(CircularProgress, null))) : __jsx(React.Fragment, null, responseStatus ? __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  }, __jsx(Box, {\n    width: 1200,\n    className: classes.cardPayment\n  }, __jsx(Grid, {\n    container: true\n  }, __jsx(Grid, {\n    item: true,\n    md: \"6\"\n  }, __jsx(Box, {\n    p: 2,\n    className: clsx(classes.paymentWrap, classes.root)\n  }, __jsx(Typography, {\n    variant: isMd ? 'h5' : 'body1',\n    className: clsx(classes.fontWeight700, classes.sectionHeader, classes.fullHeight)\n  }, \"Other details\"), __jsx(TableContainer, {\n    component: Paper\n  }, __jsx(Table, {\n    className: classes.table,\n    \"aria-label\": \"simple table\"\n  }, __jsx(TableBody, null, rows.map(row => __jsx(TableRow, {\n    key: row.name\n  }, __jsx(TableCell, {\n    component: \"th\",\n    scope: \"row\"\n  }, row.name), __jsx(TableCell, {\n    align: \"right\"\n  }, row.content)))))), __jsx(Typography, {\n    variant: \"h6\",\n    className: classes.marginTopsm\n  }, fetchResponseData.linkExpireDate ? __jsx(React.Fragment, null, \"This link will expire on:-  \", convertedDate(fetchResponseData.linkExpireDate)) : __jsx(React.Fragment, null, __jsx(\"span\", {\n    className: classes.errorRed\n  }, \"This link is expired.\"))))), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 5,\n    md: 6\n  }, __jsx(Box, {\n    p: 2,\n    className: clsx(classes.paymentWrap, classes.root)\n  }, __jsx(Typography, {\n    variant: isMd ? 'h5' : 'body1',\n    className: clsx(classes.fontWeight700, classes.sectionHeader)\n  }, \"Payment Details\"), __jsx(Grid, {\n    container: true,\n    spacing: isMd ? 2 : 2\n  }, __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"Card Details*\")), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"Card Number*\"), __jsx(InputMask, {\n    mask: \"9999-9999-9999-9999\",\n    maskChar: \" \",\n    onChange: handleChange,\n    value: formState.values.cardNumber || ''\n  }, inputProps => __jsx(TextField, {\n    placeholder: \"9999-9999-9999-9999\",\n    label: \"\",\n    variant: \"outlined\",\n    size: \"medium\",\n    fullWidth: true,\n    name: \"cardNumber\",\n    helpertext: hasError('cardNumber') ? formState.errors.cardNumber[0] : null,\n    error: hasError('cardNumber')\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 6,\n    sm: 6\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"Expiry* (MM-YY)\"), __jsx(InputMask, {\n    mask: \"99-99\",\n    maskChar: \" \",\n    onChange: handleChange,\n    value: formState.values.expiry || ''\n  }, inputProps => __jsx(TextField, {\n    placeholder: \"MM-YY\",\n    label: \"\",\n    variant: \"outlined\",\n    size: \"medium\",\n    fullWidth: true,\n    name: \"expiry\",\n    helpertext: hasError('expiry') ? formState.errors.expiry[0] : null,\n    error: hasError('expiry')\n  }))), __jsx(Grid, {\n    item: true,\n    xs: 6,\n    sm: 6\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"CVC*\"), __jsx(TextField // placeholder=\"CVC*\"\n  , {\n    label: \"\",\n    variant: \"outlined\",\n    size: \"medium\",\n    type: \"password\",\n    fullWidth: true,\n    name: \"cvc\",\n    onChange: handleChange,\n    value: formState.values.cvc || '',\n    helpertext: hasError('cvc') ? formState.errors.cvc[0] : null,\n    error: hasError('cvc')\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12\n  }, __jsx(Typography, {\n    variant: \"subtitle1\",\n    color: \"textPrimary\",\n    className: classes.inputTitle\n  }, \"Card Holder Name*\"), __jsx(TextField, {\n    placeholder: \"Card holder name*\",\n    label: \"\",\n    variant: \"outlined\",\n    size: \"medium\",\n    fullWidth: true,\n    name: \"cardHolderName\",\n    helpertext: hasError('cardHolderName') ? formState.errors.cardHolderName[0] : null,\n    error: hasError('cardHolderName'),\n    type: \"cardHolderName\",\n    onChange: handleChange,\n    value: formState.values.cardHolderName || ''\n  })), __jsx(Grid, {\n    item: true,\n    xs: 12,\n    sm: 12\n  }, __jsx(Button, {\n    variant: \"contained\",\n    color: \"secondary\",\n    onClick: handlePayment,\n    size: \"large\",\n    className: classes.paymentButton\n  }, \"Make Payment\")), __jsx(Box, {\n    className: classes.formError,\n    pt: 3\n  }, formError))))))) : __jsx(Box, {\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"80vh\"\n  }, __jsx(Box, null, __jsx(Grid, null, __jsx(Card, {\n    className: clsx(classes.root, classes.paddingExtra)\n  }, __jsx(CardActionArea, null, __jsx(CardContent, null, __jsx(Typography, {\n    gutterBottom: true,\n    variant: \"h5\",\n    component: \"h2\"\n  }, \"Welcome to Coinifide\"), __jsx(Typography, {\n    variant: \"body2\",\n    color: \"textSecondary\",\n    component: \"p\"\n  }, errorState))), __jsx(CardActions, null, __jsx(Button, {\n    className: clsx(classes.commonBtn, classes.anotherCommonBtn),\n    variant: \"outline\",\n    color: \"secondary\",\n    onClick: () => router.push('/dashboard?pid=billing'),\n    autoFocus: true\n  }, \"Go To Dashboard\"))))))));\n};\n\nexport default CertificatePayment;","map":null,"metadata":{},"sourceType":"module"}