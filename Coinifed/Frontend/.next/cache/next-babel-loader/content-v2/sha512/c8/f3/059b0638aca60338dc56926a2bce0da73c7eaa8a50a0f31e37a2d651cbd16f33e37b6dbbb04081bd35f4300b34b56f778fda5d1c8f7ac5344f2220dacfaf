{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Axios from \"axios\";\nimport { ErrorHandlerHelper } from \"./ErrorHandlerHelper\";\nimport { SuccessHandlerHelper } from \"./SuccessHandlerHelper\";\nimport AppConfig from \"../config/appConfig\";\n/**\r\n * ApiHelper Class - For making Api Requests\r\n */\n\nlet CancelToken = Axios.CancelToken;\nlet cancel;\nexport class ApiHelper {\n  constructor() {\n    _defineProperty(this, \"_portalGateway\", void 0);\n\n    _defineProperty(this, \"_apiVersion\", void 0);\n\n    _defineProperty(this, \"setHost\", host => {\n      this._portalGateway = host;\n    });\n\n    _defineProperty(this, \"setApiVersion\", version => {\n      this._apiVersion = version;\n    });\n\n    _defineProperty(this, \"cancelRequest\", err => {\n      cancel && cancel(err);\n    });\n\n    this._portalGateway = AppConfig.API_ENDPOINT;\n    this._apiVersion = \"\";\n    this.source = Axios.CancelToken.source();\n    this.cancelToken = this.source.token;\n  }\n\n  /**\r\n   * Fetches from the Gateway defined by the instantiated object. Accepts <T> as output object.\r\n   * @example <caption>\"/Auth/UserAccount\", \"/GetCurrentUser\", \"GET\", \"JWT Content\"</caption>\r\n   * @param {service} service - wanting to be access ex. \"UserAuth/Auth\"\r\n   * @param {endpoint} endpoint - you wish to call ex. \"/Login\"\r\n   * @param {method} mehotd - method (GET, UPDATE, DELETE, POST)\r\n   * @param {jwt} JWT - JSON Web Token (Optional)\r\n   * @param {queryOptions} Query - query options for \"GET\" methods (Optional)\r\n   * @param {body} body - JSON body for \"UPDATE, DELETE and POST\" methods (Optional)\r\n   */\n  async FetchFromServer(service, endpoint, method, authenticated = false, authToken, queryOptions = undefined, body = undefined, responseType) {\n    let url = this._portalGateway + service + endpoint;\n    let headers = {\n      \"Content-Type\": \"application/json\"\n    };\n\n    if (authenticated) {\n      // const storageSession = localStorage.getItem(\"token\");\n      const storageSession = authToken;\n      headers.Authorization = storageSession;\n    }\n\n    try {\n      method = method.toLowerCase();\n      let response = await Axios.request({\n        method,\n        url,\n        data: body,\n        headers: headers,\n        params: queryOptions,\n        cancelToken: new CancelToken(function executor(c) {\n          // An executor function receives a cancel function as a parameter\n          cancel = c;\n        })\n      });\n\n      if (response.ok === false || response.status !== 200) {\n        let errorObject = {\n          code: response.status,\n          data: response.data\n        };\n        throw errorObject;\n      }\n\n      const data = new SuccessHandlerHelper(response.data);\n      return data.data;\n    } catch (err) {\n      if (Axios.isCancel(err) || !err.response) {\n        return {\n          isError: true,\n          error: \"Request cancelled\",\n          messages: err.message === \"cancel\" ? [] : [\"Request cancelled\"]\n        };\n      } else {\n        const errorHelper = new ErrorHandlerHelper(err.response);\n        return errorHelper.error;\n      }\n    }\n  }\n  /**\r\n   * Cancels the last request.\r\n   */\n\n\n}","map":null,"metadata":{},"sourceType":"module"}