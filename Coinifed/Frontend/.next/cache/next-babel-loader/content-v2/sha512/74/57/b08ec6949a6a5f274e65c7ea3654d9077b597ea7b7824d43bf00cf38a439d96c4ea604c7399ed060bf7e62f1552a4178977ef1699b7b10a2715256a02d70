{"ast":null,"code":"function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\r\n * ErrorHandlerHelper Class - For managing errors\r\n */\nexport class ErrorHandlerHelper {\n  constructor(err) {\n    _defineProperty(this, \"rawError\", void 0);\n\n    _defineProperty(this, \"error\", {\n      code: 500,\n      isError: true,\n      timestamp: Date.now(),\n      error: 'Unknown error',\n      messages: [],\n      data: undefined\n    });\n\n    _defineProperty(this, \"setError\", () => {\n      const code = this.rawError && this.rawError.code ? this.rawError.code : this.error.code;\n      this.error.code = code ? code : 400;\n      this.error.timestamp = Date.now();\n      this.error.messages = [];\n\n      if (this.rawError.data && typeof this.rawError.data === 'object' && this.rawError.data.message) {\n        if (this.rawError && this.rawError.data.message === \"Token has expired\" || this.rawError && this.rawError.data.message === \"Unauthorized, Invalid token!\") {\n          localStorage.removeItem(\"token\");\n          window.location.href = \"/\";\n        } else {\n          this.error.messages.push(this.rawError.data.message);\n        }\n      }\n\n      if (!this.error.messages.length) {\n        this.error.error = 'Unknown';\n        this.error.messages = [null];\n      }\n    });\n\n    this.rawError = err;\n    this.setError();\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}